import { AfterViewInit, ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { NotifierAnimationService } from '../services/notifier-animation.service';
import { NotifierConfig } from '../models/notifier-config.model';
import { NotifierNotification } from '../models/notifier-notification.model';
import { NotifierService } from '../services/notifier.service';
import { NotifierTimerService } from '../services/notifier-timer.service';
/**
 * Notifier notification component
 * -------------------------------
 * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this
 * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.
 * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and
 * mouse movements.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NotifierNotificationComponent implements AfterViewInit {
    /**
     * Input: Notification object, contains all details necessary to construct the notification
     */
    notification: NotifierNotification;
    /**
     * Output: Ready event, handles the initialization success by emitting a reference to this notification component
     */
    ready: EventEmitter<NotifierNotificationComponent>;
    /**
     * Output: Dismiss event, handles the click on the dismiss button by emitting the notification ID of this notification component
     */
    dismiss: EventEmitter<string>;
    /**
     * Notifier configuration
     */
    readonly config: NotifierConfig;
    /**
     * Notifier timer service
     */
    private readonly timerService;
    /**
     * Notifier animation service
     */
    private readonly animationService;
    /**
     * Angular renderer, used to preserve the overall DOM abstraction & independence
     */
    private readonly renderer;
    /**
     * Native element reference, used for manipulating DOM properties
     */
    private readonly element;
    /**
     * Current notification height, calculated and cached here (#perfmatters)
     */
    private elementHeight;
    /**
     * Current notification width, calculated and cached here (#perfmatters)
     */
    private elementWidth;
    /**
     * Current notification shift, calculated and cached here (#perfmatters)
     */
    private elementShift;
    /**
     * Constructor
     *
     * @param elementRef               Reference to the component's element
     * @param renderer                 Angular renderer
     * @param notifierService          Notifier service
     * @param notifierTimerService     Notifier timer service
     * @param notifierAnimationService Notifier animation service
     */
    constructor(elementRef: ElementRef, renderer: Renderer2, notifierService: NotifierService, notifierTimerService: NotifierTimerService, notifierAnimationService: NotifierAnimationService);
    /**
     * Component after view init lifecycle hook, setts up the component and then emits the ready event
     */
    ngAfterViewInit(): void;
    /**
     * Get the notifier config
     *
     * @returns Notifier configuration
     */
    getConfig(): NotifierConfig;
    /**
     * Get notification element height (in px)
     *
     * @returns Notification element height (in px)
     */
    getHeight(): number;
    /**
     * Get notification element width (in px)
     *
     * @returns Notification element height (in px)
     */
    getWidth(): number;
    /**
     * Get notification shift offset (in px)
     *
     * @returns Notification element shift offset (in px)
     */
    getShift(): number;
    /**
     * Show (animate in) this notification
     *
     * @returns Promise, resolved when done
     */
    show(): Promise<undefined>;
    /**
     * Hide (animate out) this notification
     *
     * @returns Promise, resolved when done
     */
    hide(): Promise<undefined>;
    /**
     * Shift (move) this notification
     *
     * @param   distance         Distance to shift (in px)
     * @param   shiftToMakePlace Flag, defining in which direction to shift
     * @returns Promise, resolved when done
     */
    shift(distance: number, shiftToMakePlace: boolean): Promise<undefined>;
    /**
     * Handle click on dismiss button
     */
    onClickDismiss(): void;
    /**
     * Handle mouseover over notification area
     */
    onNotificationMouseover(): void;
    /**
     * Handle mouseout from notification area
     */
    onNotificationMouseout(): void;
    /**
     * Handle click on notification area
     */
    onNotificationClick(): void;
    /**
     * Start the auto hide timer (if enabled)
     */
    private startAutoHideTimer;
    /**
     * Pause the auto hide timer (if enabled)
     */
    private pauseAutoHideTimer;
    /**
     * Continue the auto hide timer (if enabled)
     */
    private continueAutoHideTimer;
    /**
     * Stop the auto hide timer (if enabled)
     */
    private stopAutoHideTimer;
    /**
     * Initial notification setup
     */
    private setup;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NotifierNotificationComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NotifierNotificationComponent, "notifier-notification", never, {
    "notification": "notification";
}, {
    "ready": "ready";
    "dismiss": "dismiss";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItbm90aWZpY2F0aW9uLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJub3RpZmllci1ub3RpZmljYXRpb24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJJQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb3RpZmllckFuaW1hdGlvblNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9ub3RpZmllci1hbmltYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBOb3RpZmllckNvbmZpZyB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpZXJOb3RpZmljYXRpb24gfSBmcm9tICcuLi9tb2RlbHMvbm90aWZpZXItbm90aWZpY2F0aW9uLm1vZGVsJztcbmltcG9ydCB7IE5vdGlmaWVyU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL25vdGlmaWVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTm90aWZpZXJUaW1lclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9ub3RpZmllci10aW1lci5zZXJ2aWNlJztcbi8qKlxuICogTm90aWZpZXIgbm90aWZpY2F0aW9uIGNvbXBvbmVudFxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVGhpcyBjb21wb25lbnQgaXMgcmVzcG9uc2libGUgZm9yIGFjdHVhbGx5IGRpc3BsYXlpbmcgdGhlIG5vdGlmaWNhdGlvbiBvbiBzY3JlZW4uIEluIGFkZGl0aW9uLCBpdCdzIGFibGUgdG8gc2hvdyBhbmQgaGlkZSB0aGlzXG4gKiBub3RpZmljYXRpb24sIGluIHBhcnRpY3VsYXIgdG8gYW5pbWF0ZSB0aGlzIG5vdGlmaWNhdGlvbiBpbiBhbmQgb3V0LCBhcyB3ZWxsIGFzIHNoaWZ0IChtb3ZlKSB0aGlzIG5vdGlmaWNhdGlvbiB2ZXJ0aWNhbGx5IGFyb3VuZC5cbiAqIEZ1cnRoZXJtb3JlLCB0aGUgbm90aWZpY2F0aW9uIGNvbXBvbmVudCBoYW5kbGVzIGFsbCBpbnRlcmFjdGlvbnMgdGhlIHVzZXIgaGFzIHdpdGggdGhpcyBub3RpZmljYXRpb24gLyBjb21wb25lbnQsIHN1Y2ggYXMgY2xpY2tzIGFuZFxuICogbW91c2UgbW92ZW1lbnRzLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOb3RpZmllck5vdGlmaWNhdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgIC8qKlxuICAgICAqIElucHV0OiBOb3RpZmljYXRpb24gb2JqZWN0LCBjb250YWlucyBhbGwgZGV0YWlscyBuZWNlc3NhcnkgdG8gY29uc3RydWN0IHRoZSBub3RpZmljYXRpb25cbiAgICAgKi9cbiAgICBub3RpZmljYXRpb246IE5vdGlmaWVyTm90aWZpY2F0aW9uO1xuICAgIC8qKlxuICAgICAqIE91dHB1dDogUmVhZHkgZXZlbnQsIGhhbmRsZXMgdGhlIGluaXRpYWxpemF0aW9uIHN1Y2Nlc3MgYnkgZW1pdHRpbmcgYSByZWZlcmVuY2UgdG8gdGhpcyBub3RpZmljYXRpb24gY29tcG9uZW50XG4gICAgICovXG4gICAgcmVhZHk6IEV2ZW50RW1pdHRlcjxOb3RpZmllck5vdGlmaWNhdGlvbkNvbXBvbmVudD47XG4gICAgLyoqXG4gICAgICogT3V0cHV0OiBEaXNtaXNzIGV2ZW50LCBoYW5kbGVzIHRoZSBjbGljayBvbiB0aGUgZGlzbWlzcyBidXR0b24gYnkgZW1pdHRpbmcgdGhlIG5vdGlmaWNhdGlvbiBJRCBvZiB0aGlzIG5vdGlmaWNhdGlvbiBjb21wb25lbnRcbiAgICAgKi9cbiAgICBkaXNtaXNzOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICAvKipcbiAgICAgKiBOb3RpZmllciBjb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29uZmlnOiBOb3RpZmllckNvbmZpZztcbiAgICAvKipcbiAgICAgKiBOb3RpZmllciB0aW1lciBzZXJ2aWNlXG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSB0aW1lclNlcnZpY2U7XG4gICAgLyoqXG4gICAgICogTm90aWZpZXIgYW5pbWF0aW9uIHNlcnZpY2VcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IGFuaW1hdGlvblNlcnZpY2U7XG4gICAgLyoqXG4gICAgICogQW5ndWxhciByZW5kZXJlciwgdXNlZCB0byBwcmVzZXJ2ZSB0aGUgb3ZlcmFsbCBET00gYWJzdHJhY3Rpb24gJiBpbmRlcGVuZGVuY2VcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlbmRlcmVyO1xuICAgIC8qKlxuICAgICAqIE5hdGl2ZSBlbGVtZW50IHJlZmVyZW5jZSwgdXNlZCBmb3IgbWFuaXB1bGF0aW5nIERPTSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50O1xuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgbm90aWZpY2F0aW9uIGhlaWdodCwgY2FsY3VsYXRlZCBhbmQgY2FjaGVkIGhlcmUgKCNwZXJmbWF0dGVycylcbiAgICAgKi9cbiAgICBwcml2YXRlIGVsZW1lbnRIZWlnaHQ7XG4gICAgLyoqXG4gICAgICogQ3VycmVudCBub3RpZmljYXRpb24gd2lkdGgsIGNhbGN1bGF0ZWQgYW5kIGNhY2hlZCBoZXJlICgjcGVyZm1hdHRlcnMpXG4gICAgICovXG4gICAgcHJpdmF0ZSBlbGVtZW50V2lkdGg7XG4gICAgLyoqXG4gICAgICogQ3VycmVudCBub3RpZmljYXRpb24gc2hpZnQsIGNhbGN1bGF0ZWQgYW5kIGNhY2hlZCBoZXJlICgjcGVyZm1hdHRlcnMpXG4gICAgICovXG4gICAgcHJpdmF0ZSBlbGVtZW50U2hpZnQ7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50UmVmICAgICAgICAgICAgICAgUmVmZXJlbmNlIHRvIHRoZSBjb21wb25lbnQncyBlbGVtZW50XG4gICAgICogQHBhcmFtIHJlbmRlcmVyICAgICAgICAgICAgICAgICBBbmd1bGFyIHJlbmRlcmVyXG4gICAgICogQHBhcmFtIG5vdGlmaWVyU2VydmljZSAgICAgICAgICBOb3RpZmllciBzZXJ2aWNlXG4gICAgICogQHBhcmFtIG5vdGlmaWVyVGltZXJTZXJ2aWNlICAgICBOb3RpZmllciB0aW1lciBzZXJ2aWNlXG4gICAgICogQHBhcmFtIG5vdGlmaWVyQW5pbWF0aW9uU2VydmljZSBOb3RpZmllciBhbmltYXRpb24gc2VydmljZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIG5vdGlmaWVyU2VydmljZTogTm90aWZpZXJTZXJ2aWNlLCBub3RpZmllclRpbWVyU2VydmljZTogTm90aWZpZXJUaW1lclNlcnZpY2UsIG5vdGlmaWVyQW5pbWF0aW9uU2VydmljZTogTm90aWZpZXJBbmltYXRpb25TZXJ2aWNlKTtcbiAgICAvKipcbiAgICAgKiBDb21wb25lbnQgYWZ0ZXIgdmlldyBpbml0IGxpZmVjeWNsZSBob29rLCBzZXR0cyB1cCB0aGUgY29tcG9uZW50IGFuZCB0aGVuIGVtaXRzIHRoZSByZWFkeSBldmVudFxuICAgICAqL1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbm90aWZpZXIgY29uZmlnXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBOb3RpZmllciBjb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgZ2V0Q29uZmlnKCk6IE5vdGlmaWVyQ29uZmlnO1xuICAgIC8qKlxuICAgICAqIEdldCBub3RpZmljYXRpb24gZWxlbWVudCBoZWlnaHQgKGluIHB4KVxuICAgICAqXG4gICAgICogQHJldHVybnMgTm90aWZpY2F0aW9uIGVsZW1lbnQgaGVpZ2h0IChpbiBweClcbiAgICAgKi9cbiAgICBnZXRIZWlnaHQoKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEdldCBub3RpZmljYXRpb24gZWxlbWVudCB3aWR0aCAoaW4gcHgpXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBOb3RpZmljYXRpb24gZWxlbWVudCBoZWlnaHQgKGluIHB4KVxuICAgICAqL1xuICAgIGdldFdpZHRoKCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBHZXQgbm90aWZpY2F0aW9uIHNoaWZ0IG9mZnNldCAoaW4gcHgpXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBOb3RpZmljYXRpb24gZWxlbWVudCBzaGlmdCBvZmZzZXQgKGluIHB4KVxuICAgICAqL1xuICAgIGdldFNoaWZ0KCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBTaG93IChhbmltYXRlIGluKSB0aGlzIG5vdGlmaWNhdGlvblxuICAgICAqXG4gICAgICogQHJldHVybnMgUHJvbWlzZSwgcmVzb2x2ZWQgd2hlbiBkb25lXG4gICAgICovXG4gICAgc2hvdygpOiBQcm9taXNlPHVuZGVmaW5lZD47XG4gICAgLyoqXG4gICAgICogSGlkZSAoYW5pbWF0ZSBvdXQpIHRoaXMgbm90aWZpY2F0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlLCByZXNvbHZlZCB3aGVuIGRvbmVcbiAgICAgKi9cbiAgICBoaWRlKCk6IFByb21pc2U8dW5kZWZpbmVkPjtcbiAgICAvKipcbiAgICAgKiBTaGlmdCAobW92ZSkgdGhpcyBub3RpZmljYXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIGRpc3RhbmNlICAgICAgICAgRGlzdGFuY2UgdG8gc2hpZnQgKGluIHB4KVxuICAgICAqIEBwYXJhbSAgIHNoaWZ0VG9NYWtlUGxhY2UgRmxhZywgZGVmaW5pbmcgaW4gd2hpY2ggZGlyZWN0aW9uIHRvIHNoaWZ0XG4gICAgICogQHJldHVybnMgUHJvbWlzZSwgcmVzb2x2ZWQgd2hlbiBkb25lXG4gICAgICovXG4gICAgc2hpZnQoZGlzdGFuY2U6IG51bWJlciwgc2hpZnRUb01ha2VQbGFjZTogYm9vbGVhbik6IFByb21pc2U8dW5kZWZpbmVkPjtcbiAgICAvKipcbiAgICAgKiBIYW5kbGUgY2xpY2sgb24gZGlzbWlzcyBidXR0b25cbiAgICAgKi9cbiAgICBvbkNsaWNrRGlzbWlzcygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBtb3VzZW92ZXIgb3ZlciBub3RpZmljYXRpb24gYXJlYVxuICAgICAqL1xuICAgIG9uTm90aWZpY2F0aW9uTW91c2VvdmVyKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSGFuZGxlIG1vdXNlb3V0IGZyb20gbm90aWZpY2F0aW9uIGFyZWFcbiAgICAgKi9cbiAgICBvbk5vdGlmaWNhdGlvbk1vdXNlb3V0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSGFuZGxlIGNsaWNrIG9uIG5vdGlmaWNhdGlvbiBhcmVhXG4gICAgICovXG4gICAgb25Ob3RpZmljYXRpb25DbGljaygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFN0YXJ0IHRoZSBhdXRvIGhpZGUgdGltZXIgKGlmIGVuYWJsZWQpXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGFydEF1dG9IaWRlVGltZXI7XG4gICAgLyoqXG4gICAgICogUGF1c2UgdGhlIGF1dG8gaGlkZSB0aW1lciAoaWYgZW5hYmxlZClcbiAgICAgKi9cbiAgICBwcml2YXRlIHBhdXNlQXV0b0hpZGVUaW1lcjtcbiAgICAvKipcbiAgICAgKiBDb250aW51ZSB0aGUgYXV0byBoaWRlIHRpbWVyIChpZiBlbmFibGVkKVxuICAgICAqL1xuICAgIHByaXZhdGUgY29udGludWVBdXRvSGlkZVRpbWVyO1xuICAgIC8qKlxuICAgICAqIFN0b3AgdGhlIGF1dG8gaGlkZSB0aW1lciAoaWYgZW5hYmxlZClcbiAgICAgKi9cbiAgICBwcml2YXRlIHN0b3BBdXRvSGlkZVRpbWVyO1xuICAgIC8qKlxuICAgICAqIEluaXRpYWwgbm90aWZpY2F0aW9uIHNldHVwXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXR1cDtcbn1cbiJdfQ==