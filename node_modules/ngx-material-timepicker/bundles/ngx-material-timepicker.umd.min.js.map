{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/dom.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/ngx-material-timepicker-container/ngx-material-timepicker-container.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/tokens/time-locale.token.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker-time.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-parser.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/ngx-timepicker-field.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-localizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-hour.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-minute.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/ngx-material-timepicker-content/ngx-material-timepicker-content.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/append-to-input.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","TimeUnit","TimePeriod","TimeFormat","NgxMaterialTimepickerEventService","backdropClickSubject","Subject","keydownEventSubject","asObservable","pipe","shareReplay","bufferSize","refCount","dispatchEvent","event","type","next","Error","Injectable","providedIn","DomService","cfr","appRef","injector","document","appendTimepickerToBody","timepicker","config","_this","componentRef","resolveComponentFactory","keys","forEach","instance","attachView","hostView","domElement","rootNodes","body","appendChild","destroyTimepicker","destroy","detachView","ComponentFactoryResolver","ApplicationRef","Injector","Optional","Inject","args","DOCUMENT","isSameOrAfter","time","compareWith","unit","hour","hasSame","valueOf","isSameOrBefore","isDigit","e","some","keyCode","ctrlKey","metaKey","TimeAdapter","parseTime","opts","_a","getLocaleOptionsByTime","numberingSystem","locale","timeMask","split","TWELVE_SHORT","TWENTY_FOUR_SHORT","DateTime","fromFormat","formatTime","format","parsedTime","setLocale","DEFAULT_LOCALE","toLocaleString","TIME_SIMPLE","hour12","DEFAULT_NUMBERING_SYSTEM","replace","_b","toISOTime","includeOffset","suppressMilliseconds","suppressSeconds","toLocaleTimeString","DEFAULT_FORMAT","timeFormat","isTimeAvailable","min","max","granularity","minutesGap","convertedTime","minutes","minute","isAfter","isBefore","between","before","after","isBetween","formatHour","currentHour","period","AM","PM","fromDateTimeToString","TWENTY_FOUR","TWELVE","reconfigure","toFormat","luxon","local","resolvedLocaleOpts","localeConfig","defaultConfig","isNaN","parseInt","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMaterialTimepickerService","hourSubject","BehaviorSubject","minuteSubject","periodSubject","setDefaultTimeIfAvailable","setDefaultTime","console","error","getFullTime","selectedHour","getValue","selectedMinute","trim","defaultTime","toJSDate","fromJSDate","isValid","substr","toUpperCase","getHours","formatHourByPeriod","getMinutes","resetTime","AnimationState","TIME_LOCALE","InjectionToken","NgxMaterialTimepickerContainerComponent","timepickerService","eventService","timeUnit","activeTimeUnit","HOUR","unsubscribe","_defaultTime","onKeydown","stopPropagation","ngOnInit","animationState","disableAnimation","ENTER","defineTime","selectedPeriod","timepickerBaseRef","timeUpdated","takeUntil","subscribe","bind","onHourChange","onTimeChange","onHourSelected","hoursOnly","changeTimeUnit","MINUTE","hourSelected","onMinuteChange","changePeriod","setTime","timeSet","close","LEAVE","animationDone","phaseName","toState","ngOnDestroy","complete","minTime","maxTime","timeChanged","emit","Input","HostListener","Component","selector","template","animations","trigger","transition","style","transform","animate","opacity","providers","NgxMaterialTimepickerComponent","domService","isEsc","EventEmitter","opened","closed","theme","warn","_ngxMaterialTimepickerTheme","timepickerInput","_format","value","_minutesGap","gap","Math","floor","disabled","element","registerInput","input","open","cancelBtnTmpl","confirmBtnTmpl","editableHintTmpl","enableKeyboardInput","preventOverlayClick","appendToInput","timepickerClass","inputElement","subscribeToEvents","unsubscribeFromEvents","updateTime","merge","backdropClick","keydownEvent","filter","Output","NgxMaterialTimepickerToggleIconDirective","Directive","NgxMaterialTimepickerToggleComponent","undefined","_disabled","ContentChild","static","TimepickerDirective","elementRef","_value","timepickerSubscriptions","onTouched","onChange","previousFormat","_timepicker","_min","_max","picker","registerTimepicker","updateInputValue","nativeElement","updateValue","ngOnChanges","changes","currentValue","onClick","disableClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","push","ElementRef","TimepickerDirective_1","provide","NG_VALUE_ACCESSOR","useExisting","multi","host","[disabled]","(change)","(blur)","NgxMaterialTimepickerThemeDirective","ngAfterViewInit","setTheme","val","prop","setProperty","toLowerCase","TimepickerTimeUtils","fill","map","v","disableHours","hours","currentTime","fromObject","disableMinutes","hour_1","NgxMaterialTimepickerHoursFace","hourChange","hoursList","onTimeSelected","NgxMaterialTimepicker24HoursFaceComponent","_super","ngAfterContentInit","changeDetection","ChangeDetectionStrategy","OnPush","NgxMaterialTimepicker12HoursFaceComponent","NgxMaterialTimepickerMinutesFaceComponent","minutesList","minuteChange","CLOCK_HAND_STYLES","height","top","NgxMaterialTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","setClockHandPosition","addTouchEvents","faceTimeChanges","selectedTimeChanges","selectedTime","faceTime","find","setTimeout","selectAvailableTime","trackByTime","_","onMousedown","preventDefault","isStarted","selectTime","MouseEvent","x0","y0","x","y","currentAngle","clockFaceCords","clockFace","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","isInnerClockChosen","isInnerClockFace","step","round","roundAngle","onMouseup","removeTouchEvents","touchStartHandler","touchEndHandler","addEventListener","removeEventListener","decreaseClockHand","increaseClockHand","clockHand","isClockFaceDisabled","every","availableTime","sqrt","pow","ViewChild","NgxMaterialTimepickerButtonComponent","NgxMaterialTimepickerDialComponent","meridiems","Info","periodChanged","timeUnitChanged","hourChanged","minuteChanged","changeHour","changeMinute","showHint","isHintVisible","hideHint","TimeParserPipe","timeMeasure","String","Pipe","name","NgxMaterialTimepickerDialControlComponent","timeParserPipe","focused","unfocused","timeList","saveTimeAndChangeTimeUnit","previousTime","changeTimeByKeyboard","char","fromCharCode","nextTime","test","isTimeUnavailable","isTimeDisabledToChange","changeTimeByArrow","onModelChange","toString","NgxMaterialTimepickerPeriodComponent","timePeriod","isPeriodAvailable","isSwitchPeriodAvailable","getDisabledTimeByPeriod","sequence","TimeFormatterPipe","OverlayDirective","preventClick","MinutesFormatterPipe","AutofocusDirective","activeElement","isFocusActive","focus","preventScroll","NgxTimepickerFieldComponent","minHour","maxHour","buttonAlign","unsubscribe$","isFirstTimeChange","timepickerTime","isDefaultTime","initTime","isTimeRangeSet","hour$","tap","clockTime","changeDefaultTimeValue","updateAvailableMinutes","minute$","distinctUntilChanged","isChangePeriodDisabled","isPeriodDisabled","updateAvailableTime","h","changeTime","m","onTimeSet","emitLocalTimeChange","localTime","clockFaceTime","updateAvailableHours","formattedTime","NgxTimepickerFieldComponent_1","NgxTimepickerTimeControlComponent","timeParser","isSelectedTimeDisabled","setAvailableTime","concatTime","changeTimeIfValid","increase","decrease","preventTyping","getAvailableTime","getNextAvailableTime","getPrevAvailableTime","onFocus","isFocused","onBlur","timeString","index","timeCollection","maxValue","findIndex","NgxTimepickerPeriodSelectorComponent","periodSelected","periods","localizedPeriod","indexOf","isOpened","select","TimeLocalizerPipe","isKeyboardEnabled","ActiveHourPipe","ActiveMinutePipe","currentMinute","NgxMaterialTimepickerContentComponent","AppendToInputDirective","renderer","offsetHeight","_inputCords","bottom","isElementFit","window","innerHeight","inputCords","_direction","direction","append","changePosition","defineElementYByDirection","setStyle","inputTop","inputBottom","Renderer2","NgxMaterialTimepickerModule","ngModule","NgxMaterialTimepickerModule_1","useValue","NgModule","imports","CommonModule","FormsModule","exports","declarations","ɵ0","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum TimeUnit {\n    HOUR,\n    MINUTE\n}\n","export enum TimePeriod {\n    AM = 'AM',\n    PM = 'PM'\n}\n","export enum TimeFormat {\n    TWELVE = 'hh:mm a',\n    TWELVE_SHORT = 'h:m a',\n    TWENTY_FOUR = 'HH:mm',\n    TWENTY_FOUR_SHORT = 'H:m'\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerEventService {\n\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\n\n    get backdropClick(): Observable<MouseEvent> {\n        return this.backdropClickSubject.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    get keydownEvent(): Observable<KeyboardEvent> {\n        return this.keydownEventSubject.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\n        switch (event.type) {\n            case 'click':\n                this.backdropClickSubject.next(<MouseEvent>event);\n                break;\n            case 'keydown':\n                this.keydownEventSubject.next(<KeyboardEvent>event);\n                break;\n            default:\n                throw new Error('no such event type');\n        }\n    }\n\n}\n","import {\n    ApplicationRef,\n    ComponentFactoryResolver,\n    ComponentRef,\n    EmbeddedViewRef,\n    Inject,\n    Injectable,\n    Injector,\n    Optional,\n    Type\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from '../components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport { TimepickerConfig } from '../models/timepicker-config.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DomService {\n\n    private componentRef: ComponentRef<NgxMaterialTimepickerContainerComponent>;\n\n    constructor(private cfr: ComponentFactoryResolver,\n                private appRef: ApplicationRef,\n                private injector: Injector,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n    }\n\n    appendTimepickerToBody(timepicker: Type<NgxMaterialTimepickerContainerComponent>, config: TimepickerConfig): void {\n        this.componentRef = this.cfr.resolveComponentFactory(timepicker).create(this.injector);\n\n        Object.keys(config).forEach(key => this.componentRef.instance[key] = config[key]);\n\n        this.appRef.attachView(this.componentRef.hostView);\n\n        const domElement: HTMLElement = (this.componentRef.hostView as EmbeddedViewRef<NgxMaterialTimepickerContainerComponent>)\n            .rootNodes[0];\n\n        this.document.body.appendChild(domElement);\n    }\n\n    destroyTimepicker(): void {\n        this.componentRef.destroy();\n        this.appRef.detachView(this.componentRef.hostView);\n    }\n}\n","/* tslint:disable */\nimport { DateTime } from 'luxon';\n\n\nexport function isSameOrAfter(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour >= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n    }\n}\n\nexport function isSameOrBefore(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour <= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n    }\n}\n\nexport function isBetween(time: DateTime, before: DateTime, after: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\n    }\n    if (unit === 'minutes') {\n        return isSameOrBefore(time, after) && isSameOrAfter(time, before);\n    }\n}\n\nexport function isDigit(e: KeyboardEvent) {\n    // Allow: backspace, delete, tab, escape, enter\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n        // Allow: Ctrl/cmd+A\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+C\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+X\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: home, end, left, right, up, down\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\n\n        return true;\n    }\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n}\n","import {DateTime, DateTimeFormatOptions, LocaleOptions, NumberingSystem} from 'luxon';\n\nimport {TimeFormat} from '../models/time-format.enum';\nimport {TimePeriod} from '../models/time-period.enum';\nimport {isBetween, isSameOrAfter, isSameOrBefore} from '../utils/timepicker.utils';\nimport {TimeOptions} from '../models/time-options.interface';\n\n// @dynamic\nexport class TimeAdapter {\n    static DEFAULT_FORMAT = 12;\n    static DEFAULT_LOCALE = 'en-US';\n    static DEFAULT_NUMBERING_SYSTEM: NumberingSystem = 'latn';\n\n    static parseTime(time: string, opts: TimeOptions): DateTime {\n        const {numberingSystem, locale} = TimeAdapter.getLocaleOptionsByTime(time, opts);\n        const isPeriodExist = time.split(' ').length === 2;\n        const timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;\n\n        return DateTime.fromFormat(time, timeMask, {numberingSystem, locale});\n    }\n\n    static formatTime(time: string, opts: TimeOptions): string {\n        const {format} = opts;\n        const parsedTime = TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE);\n\n        if (format !== 24) {\n            return parsedTime.toLocaleString({\n                ...DateTime.TIME_SIMPLE,\n                hour12: format !== 24,\n                numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM\n            })?.replace(/\\u200E/g, '');\n        }\n        return parsedTime.toISOTime({\n            includeOffset: false,\n            suppressMilliseconds: true,\n            suppressSeconds: true\n        })?.replace(/\\u200E/g, '');\n    }\n\n    static toLocaleTimeString(time: string, opts: TimeOptions = {}): string {\n        const {format = TimeAdapter.DEFAULT_FORMAT, locale = TimeAdapter.DEFAULT_LOCALE} = opts;\n        const timeFormat: DateTimeFormatOptions = {...DateTime.TIME_SIMPLE, hour12: format !== 24};\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\n\n        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\n    }\n\n    static isTimeAvailable(\n        time: string,\n        min?: DateTime,\n        max?: DateTime,\n        granularity?: 'hours' | 'minutes',\n        minutesGap?: number | null,\n        format?: number\n    ): boolean {\n        if (!time) {\n            return;\n        }\n\n        const convertedTime = this.parseTime(time, {format});\n        const minutes = convertedTime.minute;\n\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n        }\n        const isAfter = (min && !max)\n            && isSameOrAfter(convertedTime, min, granularity);\n        const isBefore = (max && !min)\n            && isSameOrBefore(convertedTime, max, granularity);\n        const between = (min && max)\n            && isBetween(convertedTime, min, max, granularity);\n        const isAvailable = !min && !max;\n\n        return isAfter || isBefore || between || isAvailable;\n    }\n\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\n        if (format === 24) {\n            return currentHour;\n        }\n        const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\n\n        if (period === TimePeriod.AM && hour === 12) {\n            return 0;\n        } else if (period === TimePeriod.PM && hour === 24) {\n            return 12;\n        }\n        return hour;\n    }\n\n    static fromDateTimeToString(time: DateTime, format: number): string {\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\n\n        return time.reconfigure({\n            numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\n            locale: TimeAdapter.DEFAULT_LOCALE\n        }).toFormat(timeFormat);\n    }\n\n    private static getLocaleOptionsByTime(time: string, opts: TimeOptions): LocaleOptions {\n        const {numberingSystem, locale} = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();\n        const localeConfig: LocaleOptions = {numberingSystem: numberingSystem as NumberingSystem, locale};\n        const defaultConfig: LocaleOptions = {numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM, locale: TimeAdapter.DEFAULT_LOCALE};\n\n        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { TimeAdapter } from './time-adapter';\nimport { DateTime } from 'luxon';\n\n\nconst DEFAULT_HOUR: ClockFaceTime = {\n    time: 12,\n    angle: 360\n};\nconst DEFAULT_MINUTE: ClockFaceTime = {\n    time: 0,\n    angle: 360\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerService {\n\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\n\n\n    set hour(hour: ClockFaceTime) {\n        this.hourSubject.next(hour);\n    }\n\n    get selectedHour(): Observable<ClockFaceTime> {\n        return this.hourSubject.asObservable();\n    }\n\n    set minute(minute: ClockFaceTime) {\n        this.minuteSubject.next(minute);\n    }\n\n    get selectedMinute(): Observable<ClockFaceTime> {\n        return this.minuteSubject.asObservable();\n    }\n\n    set period(period: TimePeriod) {\n        const isPeriodValid = (period === TimePeriod.AM) || (period === TimePeriod.PM);\n\n        if (isPeriodValid) {\n            this.periodSubject.next(period);\n        }\n    }\n\n    get selectedPeriod(): Observable<TimePeriod> {\n        return this.periodSubject.asObservable();\n    }\n\n\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\n        /* Workaround to double error message*/\n        try {\n            if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\n                this.setDefaultTime(time, format);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    getFullTime(format: number): string {\n        const selectedHour = this.hourSubject.getValue().time;\n        const selectedMinute = this.minuteSubject.getValue().time;\n        const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\n        const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\n        const period = format === 12 ? this.periodSubject.getValue() : '';\n        const time = `${hour}:${minute} ${period}`.trim();\n\n        return TimeAdapter.formatTime(time, {format});\n    }\n\n    private setDefaultTime(time: string, format: number) {\n        const defaultTime = TimeAdapter.parseTime(time, {format}).toJSDate();\n\n        if (DateTime.fromJSDate(defaultTime).isValid) {\n            const period = time.substr(time.length - 2).toUpperCase();\n            const hour = defaultTime.getHours();\n\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as TimePeriod)};\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\n            this.period = period as TimePeriod;\n\n        } else {\n            this.resetTime();\n        }\n    }\n\n    private resetTime(): void {\n        this.hour = {...DEFAULT_HOUR};\n        this.minute = {...DEFAULT_MINUTE};\n        this.period = TimePeriod.AM;\n    }\n}\n\n/***\n *  Format hour in 24hours format to meridian (AM or PM) format\n */\nfunction formatHourByPeriod(hour: number, period: TimePeriod): number {\n    switch (period) {\n        case TimePeriod.AM:\n            return hour === 0 ? 12 : hour;\n        case TimePeriod.PM:\n            return hour === 12 ? 12 : hour - 12;\n        default:\n            return hour;\n    }\n}\n","import { Component, HostListener, Inject, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { DateTime } from 'luxon';\nimport { animate, AnimationEvent, style, transition, trigger } from '@angular/animations';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Observable, Subject } from 'rxjs';\nimport { shareReplay, takeUntil } from 'rxjs/operators';\nimport { TimeAdapter } from '../../services/time-adapter';\nimport { TimepickerRef } from '../../models/timepicker-ref.interface';\nimport { TimepickerConfig } from '../../models/timepicker-config.interface';\nimport { NgxMaterialTimepickerEventService } from '../../services/ngx-material-timepicker-event.service';\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\n\nexport enum AnimationState {\n    ENTER = 'enter',\n    LEAVE = 'leave'\n}\n\n@Component({\n    selector: 'ngx-material-timepicker-container',\n    templateUrl: './ngx-material-timepicker-container.component.html',\n    styleUrls: ['./ngx-material-timepicker-container.component.scss'],\n    animations: [\n        trigger('timepicker', [\n            transition(`* => ${AnimationState.ENTER}`, [\n                style({transform: 'translateY(-30%)'}),\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\n            ]),\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\n                style({transform: 'translateY(0)', opacity: 1}),\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\n            ])\n        ])\n    ],\n    providers: [NgxMaterialTimepickerService]\n})\nexport class NgxMaterialTimepickerContainerComponent implements OnInit, OnDestroy, TimepickerConfig {\n\n    selectedHour: Observable<ClockFaceTime>;\n    selectedMinute: Observable<ClockFaceTime>;\n    selectedPeriod: Observable<TimePeriod>;\n\n    timeUnit = TimeUnit;\n    activeTimeUnit = TimeUnit.HOUR;\n\n    animationState: AnimationState;\n\n    cancelBtnTmpl: TemplateRef<Node>;\n    editableHintTmpl: TemplateRef<Node>;\n    confirmBtnTmpl: TemplateRef<Node>;\n    inputElement: any;\n\n    enableKeyboardInput: boolean;\n    preventOverlayClick: boolean;\n    disableAnimation: boolean;\n    disabled: boolean;\n    appendToInput: boolean;\n    hoursOnly: boolean;\n\n    format: number;\n    minutesGap: number;\n\n    minTime: DateTime;\n    maxTime: DateTime;\n    time: string;\n\n    timepickerClass: string;\n    theme: NgxMaterialTimepickerTheme;\n    timepickerBaseRef: TimepickerRef;\n\n    @Input()\n    set defaultTime(time: string) {\n        this._defaultTime = time;\n        this.setDefaultTime(time);\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    private _defaultTime: string;\n\n    private unsubscribe = new Subject();\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                private eventService: NgxMaterialTimepickerEventService,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(e: any): void {\n        this.eventService.dispatchEvent(e);\n        e.stopPropagation();\n    }\n\n    ngOnInit(): void {\n\n        this.animationState = !this.disableAnimation && AnimationState.ENTER;\n\n        this.defineTime();\n\n        this.selectedHour = this.timepickerService.selectedHour\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.selectedMinute = this.timepickerService.selectedMinute\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.selectedPeriod = this.timepickerService.selectedPeriod\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.timepickerBaseRef.timeUpdated.pipe(takeUntil(this.unsubscribe))\n            .subscribe(this.setDefaultTime.bind(this));\n    }\n\n    onHourChange(hour: ClockFaceTime): void {\n        this.timepickerService.hour = hour;\n        this.onTimeChange();\n    }\n\n    onHourSelected(hour: number): void {\n        if (!this.hoursOnly) {\n            this.changeTimeUnit(TimeUnit.MINUTE);\n        }\n        this.timepickerBaseRef.hourSelected.next(hour);\n    }\n\n    onMinuteChange(minute: ClockFaceTime): void {\n        this.timepickerService.minute = minute;\n        this.onTimeChange();\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n        this.onTimeChange();\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.activeTimeUnit = unit;\n    }\n\n    setTime(): void {\n        this.timepickerBaseRef.timeSet.next(this.timepickerService.getFullTime(this.format));\n        this.close();\n    }\n\n    close(): void {\n        if (this.disableAnimation) {\n            this.timepickerBaseRef.close();\n            return;\n        }\n\n        this.animationState = AnimationState.LEAVE;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\n            this.timepickerBaseRef.close();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe.next();\n        this.unsubscribe.complete();\n    }\n\n    private setDefaultTime(time: string): void {\n        this.timepickerService.setDefaultTimeIfAvailable(\n            time, this.minTime, this.maxTime, this.format, this.minutesGap);\n    }\n\n    private defineTime(): void {\n        const minTime = this.minTime;\n\n        if (minTime && (!this.time && !this.defaultTime)) {\n            const time = TimeAdapter.fromDateTimeToString(minTime, this.format);\n\n            this.setDefaultTime(time);\n        }\n    }\n\n    private onTimeChange(): void {\n        const time = TimeAdapter.toLocaleTimeString(this.timepickerService.getFullTime(this.format), {\n            locale: this.locale,\n            format: this.format\n        });\n\n        this.timepickerBaseRef.timeChanged.emit(time);\n    }\n\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const TIME_LOCALE = new InjectionToken<string>('TimeLocale');\n","import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\nimport { merge, Subject } from 'rxjs';\nimport { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { DateTime } from 'luxon';\nimport { DomService } from './services/dom.service';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from './components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport { TimepickerRef } from './models/timepicker-ref.interface';\nimport { NgxMaterialTimepickerTheme } from './models/ngx-material-timepicker-theme.interface';\n\nconst ESCAPE = 27;\n\n@Component({\n    selector: 'ngx-material-timepicker',\n    template: '',\n})\nexport class NgxMaterialTimepickerComponent implements TimepickerRef {\n\n    timeUpdated = new Subject<string>();\n\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n    @Input('ESC') isEsc = true;\n    @Input() enableKeyboardInput: boolean;\n    @Input() preventOverlayClick: boolean;\n    @Input() disableAnimation: boolean;\n    @Input() appendToInput: boolean;\n    @Input() hoursOnly = false;\n    @Input() defaultTime: string;\n    @Input() timepickerClass: string;\n    @Input() theme: NgxMaterialTimepickerTheme;\n    @Input() min: DateTime;\n    @Input() max: DateTime;\n    /**\n     * @deprecated Since version 5.1.1. Will be deleted on version 6.0.0. Use @Input() theme instead\n     */\n    @Input()\n    set ngxMaterialTimepickerTheme(theme: NgxMaterialTimepickerTheme) {\n        console.warn(`'ngxMaterialTimepickerTheme' is deprecated. Use 'theme' instead`);\n        this._ngxMaterialTimepickerTheme = theme;\n    }\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n    }\n\n    get format(): number {\n        return this.timepickerInput ? this.timepickerInput.format : this._format;\n    }\n\n    @Input()\n    set minutesGap(gap: number) {\n        if (gap == null) {\n            return;\n        }\n        gap = Math.floor(gap);\n        this._minutesGap = gap <= 59 ? gap : 1;\n    }\n\n    get minutesGap(): number {\n        return this._minutesGap;\n    }\n\n    @Output() timeSet = new EventEmitter<string>();\n    @Output() opened = new EventEmitter<null>();\n    @Output() closed = new EventEmitter<null>();\n    @Output() hourSelected = new EventEmitter<number>();\n    @Output() timeChanged = new EventEmitter<string>();\n\n    private _minutesGap: number;\n    private _format: number;\n    private _ngxMaterialTimepickerTheme: NgxMaterialTimepickerTheme;\n    private timepickerInput: TimepickerDirective;\n    private unsubscribe = new Subject();\n\n    constructor(private eventService: NgxMaterialTimepickerEventService,\n                private domService: DomService) {\n    }\n\n    get minTime(): DateTime {\n        return this.timepickerInput ? (this.timepickerInput.min as DateTime) : this.min;\n    }\n\n    get maxTime(): DateTime {\n        return this.timepickerInput ? (this.timepickerInput.max as DateTime) : this.max;\n    }\n\n    get disabled(): boolean {\n        return this.timepickerInput && this.timepickerInput.disabled;\n    }\n\n    get time(): string {\n        return this.timepickerInput && this.timepickerInput.value;\n    }\n\n    get inputElement(): any {\n        return this.timepickerInput && this.timepickerInput.element;\n    }\n\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    registerInput(input: TimepickerDirective): void {\n        if (this.timepickerInput) {\n            throw Error('A Timepicker can only be associated with a single input.');\n        }\n        this.timepickerInput = input;\n    }\n\n    open(): void {\n        this.domService.appendTimepickerToBody(NgxMaterialTimepickerContainerComponent, {\n            timepickerBaseRef: this,\n            time: this.time,\n            defaultTime: this.defaultTime,\n            maxTime: this.maxTime,\n            minTime: this.minTime,\n            format: this.format,\n            minutesGap: this.minutesGap,\n            disableAnimation: this.disableAnimation,\n            cancelBtnTmpl: this.cancelBtnTmpl,\n            confirmBtnTmpl: this.confirmBtnTmpl,\n            editableHintTmpl: this.editableHintTmpl,\n            disabled: this.disabled,\n            enableKeyboardInput: this.enableKeyboardInput,\n            preventOverlayClick: this.preventOverlayClick,\n            appendToInput: this.appendToInput,\n            hoursOnly: this.hoursOnly,\n            theme: this.theme || this._ngxMaterialTimepickerTheme,\n            timepickerClass: this.timepickerClass,\n            inputElement: this.inputElement\n        });\n        this.opened.next();\n        this.subscribeToEvents();\n    }\n\n    close(): void {\n        this.domService.destroyTimepicker();\n        this.closed.next();\n        this.unsubscribeFromEvents();\n    }\n\n    updateTime(time: string): void {\n        this.timeUpdated.next(time);\n    }\n\n    private subscribeToEvents(): void {\n        merge(this.eventService.backdropClick,\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\n            .pipe(takeUntil(this.unsubscribe))\n            .subscribe(() => this.close());\n    }\n\n    private unsubscribeFromEvents(): void {\n        this.unsubscribe.next();\n        this.unsubscribe.complete();\n    }\n}\n","import {Directive} from '@angular/core';\n\n/* To override a default toggle icon */\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\n\nexport class NgxMaterialTimepickerToggleIconDirective {\n}\n","import {Component, ContentChild, Input} from '@angular/core';\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\n\n@Component({\n    selector: 'ngx-material-timepicker-toggle',\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\n})\n\nexport class NgxMaterialTimepickerToggleComponent {\n\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    private _disabled: boolean;\n\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective, {static: true}) customIcon: NgxMaterialTimepickerToggleIconDirective;\n\n    open(event): void {\n        if (this.timepicker) {\n            this.timepicker.open();\n            event.stopPropagation();\n        }\n    }\n}\n","import { Directive, ElementRef, HostListener, Inject, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerComponent } from '../ngx-material-timepicker.component';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { DateTime } from 'luxon';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\n\n@Directive({\n    selector: '[ngxTimepicker]',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: TimepickerDirective,\n            multi: true\n        }\n    ],\n    host: {\n        '[disabled]': 'disabled',\n        '(change)': 'updateValue($event.target.value)',\n        '(blur)': 'onTouched()',\n    },\n})\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.value = this._value;\n            this._timepicker.updateTime(this._value);\n        }\n        this.previousFormat = this._format;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    private _format = 12;\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._min = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._min = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    private _min: string | DateTime;\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._max = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._max = value;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    private _max: string | DateTime;\n\n    @Input('ngxTimepicker')\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\n        this.registerTimepicker(picker);\n    }\n\n    private _timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    set value(value: string) {\n        if (!value) {\n            this._value = '';\n            this.updateInputValue();\n            return;\n        }\n        const time = TimeAdapter.formatTime(value, {locale: this.locale, format: this.format});\n        const isAvailable = TimeAdapter.isTimeAvailable(\n            time,\n            <DateTime>this._min,\n            <DateTime>this._max,\n            'minutes',\n            this._timepicker.minutesGap,\n            this._format\n        );\n\n        if (isAvailable) {\n            this._value = time;\n            this.updateInputValue();\n            return;\n        }\n        console.warn('Selected time doesn\\'t match min or max value');\n    }\n\n    get value(): string {\n        if (!this._value) {\n            return '';\n        }\n        return TimeAdapter.toLocaleTimeString(this._value, {format: this.format, locale: this.locale});\n    }\n\n    private _value = '';\n\n    @Input() disabled: boolean;\n    @Input() disableClick: boolean;\n\n    private timepickerSubscriptions: Subscription[] = [];\n    private previousFormat: number;\n\n    onTouched = () => {\n    }\n\n    private onChange: (value: any) => void = () => {\n    }\n\n    constructor(private elementRef: ElementRef,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    get element(): any {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    private set defaultTime(time: string) {\n        this._timepicker.defaultTime = TimeAdapter.formatTime(time, {locale: this.locale, format: this.format});\n    }\n\n    updateValue(value: string) {\n        this.value = value;\n        this.onChange(value);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['value'] && changes['value'].currentValue) {\n            this.defaultTime = changes['value'].currentValue;\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event) {\n        if (!this.disableClick) {\n            this._timepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    writeValue(value: string): void {\n        this.value = value;\n        if (value) {\n            this.defaultTime = value;\n        }\n    }\n\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    ngOnDestroy() {\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\n    }\n\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\n        if (picker) {\n            this._timepicker = picker;\n            this._timepicker.registerInput(this);\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\n                this.value = time;\n                this.onChange(this.value);\n                this.onTouched();\n            }));\n            this.timepickerSubscriptions.push(\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\n        } else {\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\n        }\n    }\n\n    private updateInputValue(): void {\n        this.elementRef.nativeElement.value = this.value;\n    }\n\n}\n\n","import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\n\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\n\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\n\n    private element: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        this.element = elementRef.nativeElement;\n    }\n\n    ngAfterViewInit() {\n        if (this.theme) {\n            this.setTheme(this.theme);\n        }\n    }\n\n    private setTheme(theme): void {\n        for (const val in theme) {\n            if (theme.hasOwnProperty(val)) {\n                if (typeof theme[val] === 'string') {\n                    for (const prop in theme) {\n                        if (theme.hasOwnProperty(prop)) {\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\n                        }\n                    }\n                    return;\n                }\n                this.setTheme(theme[val]);\n            }\n\n        }\n    }\n}\n\nfunction camelCaseToDash(myStr) {\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n","import { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { TimeFormat } from '../models/time-format.enum';\nimport { DisabledTimeConfig } from '../models/disabled-time-config.interface';\nimport { DateTime } from 'luxon';\n\n// @dynamic\nexport class TimepickerTimeUtils {\n\n  static  getHours(format: number): ClockFaceTime[] {\n        return Array(format).fill(1).map((v, i) => {\n            const angleStep = 30;\n            const time = v + i;\n            const angle = angleStep * time;\n            return {time: time === 24 ? 0 : time, angle};\n        });\n    }\n\n  static  disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\n        if (config.min || config.max) {\n\n            return hours.map(value => {\n                const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\n                const currentTime = DateTime.fromObject({hour}).toFormat(TimeFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\n                };\n            });\n        }\n        return hours;\n    }\n\n   static getMinutes(gap = 1): ClockFaceTime[] {\n        const minutesCount = 60;\n        const angleStep = 360 / minutesCount;\n        const minutes = [];\n\n        for (let i = 0; i < minutesCount; i++) {\n            const angle = angleStep * i;\n            if (i % gap === 0) {\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\n            }\n        }\n        return minutes;\n    }\n\n    static disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\n        if (config.min || config.max) {\n\n            const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\n\n            return minutes.map(value => {\n                const currentTime = DateTime.fromObject({hour, minute: value.time}).toFormat(TimeFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\n                };\n            });\n        }\n        return minutes;\n    }\n\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\nimport { DateTime } from 'luxon';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n\nexport class NgxMaterialTimepickerHoursFace {\n\n    @Input() selectedHour: ClockFaceTime;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    hoursList: ClockFaceTime[] = [];\n\n    protected constructor(format: number) {\n        this.hoursList = TimepickerTimeUtils.getHours(format);\n    }\n\n    onTimeSelected(time: number): void {\n        this.hourSelected.next(time);\n    }\n}\n","import { AfterContentInit, ChangeDetectionStrategy, Component } from '@angular/core';\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-24-hours-face',\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\n\n    constructor() {\n        super(24);\n    }\n\n    ngAfterContentInit() {\n        this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-12-hours-face',\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\n\n    @Input() period: TimePeriod;\n\n    constructor() {\n        super(12);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { DateTime } from 'luxon';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-minutes-face',\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\n})\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\n\n    minutesList: ClockFaceTime[] = [];\n    timeUnit = TimeUnit;\n\n    @Input() selectedMinute: ClockFaceTime;\n    @Input() selectedHour: number;\n    @Input() period: TimePeriod;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            const minutes = TimepickerTimeUtils.getMinutes(this.minutesGap);\n            this.minutesList = TimepickerTimeUtils.disableMinutes(minutes, this.selectedHour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\n\nconst CLOCK_HAND_STYLES = {\n    small: {\n        height: '75px',\n        top: 'calc(50% - 75px)'\n    },\n    large: {\n        height: '103px',\n        top: 'calc(50% - 103px)'\n    }\n};\n\n@Component({\n    selector: 'ngx-material-timepicker-face',\n    templateUrl: './ngx-material-timepicker-face.component.html',\n    styleUrls: ['./ngx-material-timepicker-face.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\n\n    timeUnit = TimeUnit;\n\n    isClockFaceDisabled: boolean;\n    innerClockFaceSize = 85;\n\n    @Input() faceTime: ClockFaceTime[];\n    @Input() selectedTime: ClockFaceTime;\n    @Input() unit: TimeUnit;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\n    @Output() timeSelected = new EventEmitter<number>();\n\n    @ViewChild('clockFace', {static: true}) clockFace: ElementRef;\n    @ViewChild('clockHand', {static: true}) clockHand: ElementRef;\n\n    private isStarted: boolean;\n    private touchStartHandler: () => any;\n    private touchEndHandler: () => any;\n\n    ngAfterViewInit() {\n        this.setClockHandPosition();\n        this.addTouchEvents();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const faceTimeChanges = changes['faceTime'];\n        const selectedTimeChanges = changes['selectedTime'];\n\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\n            /* Set time according to passed an input value */\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n        }\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n            this.setClockHandPosition();\n        }\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => this.selectAvailableTime());\n        }\n    }\n\n\n    trackByTime(_, time: ClockFaceTime): string | number {\n        return time.time;\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMousedown(e: any) {\n        e.preventDefault();\n        this.isStarted = true;\n    }\n\n    @HostListener('click', ['$event'])\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\n    @HostListener('touchend', ['$event.changedTouches[0]'])\n    @HostListener('mousemove', ['$event'])\n    selectTime(e: any): void {\n\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\n            return;\n        }\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n\n        /* Get x0 and y0 of the circle */\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n        /* Counting the arctangent and convert it to from radian to deg */\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n        /* Get angle according to quadrant */\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n        /* Check if selected time from the inner clock face (24 hours format only) */\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n        /* Round angle according to angle step */\n        const angleStep = this.unit === TimeUnit.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\n        const roundedAngle = roundAngle(circleAngle, angleStep);\n        const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\n\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\n\n        if (selectedTime && !selectedTime.disabled) {\n            this.timeChange.next(selectedTime);\n\n            /* To let know whether user ended interaction with clock face */\n            if (!this.isStarted) {\n                this.timeSelected.next(selectedTime.time);\n            }\n        }\n\n    }\n\n    @HostListener('mouseup', ['$event'])\n    onMouseup(e: any) {\n        e.preventDefault();\n        this.isStarted = false;\n    }\n\n    ngOnDestroy() {\n        this.removeTouchEvents();\n    }\n\n    private addTouchEvents(): void {\n        this.touchStartHandler = this.onMousedown.bind(this);\n        this.touchEndHandler = this.onMouseup.bind(this);\n\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\n    }\n\n    private removeTouchEvents(): void {\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\n    }\n\n    private setClockHandPosition(): void {\n        if (this.format === 24) {\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n                this.decreaseClockHand();\n            } else {\n                this.increaseClockHand();\n            }\n        }\n\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n\n    private selectAvailableTime(): void {\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\n            const availableTime = this.faceTime.find(time => !time.disabled);\n\n            this.timeChange.next(availableTime);\n        }\n    }\n\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\n        /* Detect whether time from the inner clock face or not (24 format only) */\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n\n    private decreaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n\n    private increaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n}\n\nfunction roundAngle(angle: number, step: number): number {\n    return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\n    if (y > y0 && x >= x0) {// II quarter\n        return 180 - currentAngle;\n    } else if (y > y0 && x < x0) {// III quarter\n        return 180 + currentAngle;\n    } else if (y < y0 && x < x0) {// IV quarter\n        return 360 - currentAngle;\n    } else {// I quarter\n        return currentAngle;\n    }\n}\n","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-button',\n    templateUrl: './ngx-material-timepicker-button.component.html',\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\n})\nexport class NgxMaterialTimepickerButtonComponent {\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    TemplateRef\n} from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { DateTime, Info } from 'luxon';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial',\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\n\n    timeUnit = TimeUnit;\n\n    hours: ClockFaceTime[];\n    minutes: ClockFaceTime[];\n    meridiems = Info.meridiems({locale: this.locale});\n\n    isHintVisible: boolean;\n\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() hour: number | string;\n    @Input() minute: number | string;\n    @Input() format: number;\n    @Input() period: TimePeriod;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n    @Input() hoursOnly: boolean;\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue\n            || changes['format'] && changes['format'].currentValue) {\n            const hours = TimepickerTimeUtils.getHours(this.format);\n\n            this.hours = TimepickerTimeUtils.disableHours(hours, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n        if (changes['period'] && changes['period'].currentValue\n            || changes['hour'] && changes['hour'].currentValue) {\n            const minutes = TimepickerTimeUtils.getMinutes(this.minutesGap);\n\n            this.minutes = TimepickerTimeUtils.disableMinutes(minutes, +this.hour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.timeUnitChanged.next(unit);\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.periodChanged.next(period);\n    }\n\n    changeHour(hour: ClockFaceTime): void {\n        this.hourChanged.next(hour);\n    }\n\n    changeMinute(minute: ClockFaceTime): void {\n        this.minuteChanged.next(minute);\n    }\n\n    showHint(): void {\n        this.isHintVisible = true;\n    }\n\n    hideHint(): void {\n        this.isHintVisible = false;\n    }\n}\n","import { Inject, Injectable, Pipe, PipeTransform } from '@angular/core';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime, NumberingSystem } from 'luxon';\n\ntype TimeMeasure = 'hour' | 'minute';\n\n@Pipe({\n    name: 'timeParser'\n})\n@Injectable()\nexport class TimeParserPipe implements PipeTransform {\n\n    private readonly numberingSystem: NumberingSystem;\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n        this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem as NumberingSystem;\n    }\n\n    transform(time: string | number, timeUnit = TimeUnit.HOUR): number | string {\n        if (time == null || time === '') {\n            return '';\n        }\n\n        if (!isNaN(+time)) {\n            return time;\n        }\n\n        if (timeUnit === TimeUnit.MINUTE) {\n            return this.parseTime(time, 'm', 'minute');\n        }\n\n        return this.parseTime(time, 'H', 'hour');\n\n    }\n\n    private parseTime(time: string | number, format: string, timeMeasure: TimeMeasure): number {\n        const parsedTime = DateTime.fromFormat(String(time), format, {numberingSystem: this.numberingSystem})[timeMeasure];\n\n        if (!isNaN(parsedTime)) {\n            return parsedTime;\n        }\n\n        throw new Error(`Cannot parse time - ${time}`);\n    }\n\n}\n","/* tslint:disable:triple-equals */\nimport {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\nimport {TimeUnit} from '../../models/time-unit.enum';\nimport {isDigit} from '../../utils/timepicker.utils';\nimport {TimeParserPipe} from '../../pipes/time-parser.pipe';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial-control',\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss'],\n    providers: [TimeParserPipe]\n})\nexport class NgxMaterialTimepickerDialControlComponent {\n\n    previousTime: number | string;\n\n    @Input() timeList: ClockFaceTime[];\n    @Input() timeUnit: TimeUnit;\n    @Input() time: string;\n    @Input() isActive: boolean;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n    @Input() disabled: boolean;\n\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\n    @Output() focused = new EventEmitter<null>();\n    @Output() unfocused = new EventEmitter<null>();\n\n    constructor(private timeParserPipe: TimeParserPipe) {\n    }\n\n    private get selectedTime(): ClockFaceTime {\n        if (!!this.time) {\n            return this.timeList.find(t => t.time === +this.time);\n        }\n    }\n\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\n        event.preventDefault();\n        this.previousTime = this.time;\n        this.timeUnitChanged.next(unit);\n        this.focused.next();\n    }\n\n    updateTime(): void {\n        const time = this.selectedTime;\n        if (time) {\n            this.timeChanged.next(time);\n            this.previousTime = time.time;\n        }\n    }\n\n    changeTimeByKeyboard(e: any): void {\n        const char = String.fromCharCode(e.keyCode);\n\n        if (isTimeDisabledToChange(this.time, char, this.timeList)) {\n            e.preventDefault();\n        }\n    }\n\n    onKeydown(e: any): void {\n        if (!isDigit(e)) {\n            e.preventDefault();\n        } else {\n            this.changeTimeByArrow(e.keyCode);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = this.timeParserPipe.transform(value, this.timeUnit).toString();\n    }\n\n    private changeTimeByArrow(keyCode: number): void {\n        const ARROW_UP = 38;\n        const ARROW_DOWN = 40;\n        let time: string;\n\n        if (keyCode === ARROW_UP) {\n            time = String(+this.time + (this.minutesGap || 1));\n        } else if (keyCode === ARROW_DOWN) {\n            time = String(+this.time - (this.minutesGap || 1));\n        }\n\n        if (!isTimeUnavailable(time, this.timeList)) {\n            this.time = time;\n            this.updateTime();\n        }\n    }\n\n}\n\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return isTimeUnavailable(time, timeList);\n    }\n}\n\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\n    const selectedTime = timeList.find(value => value.time === +time);\n    return !selectedTime || (selectedTime && selectedTime.disabled);\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { animate, sequence, style, transition, trigger } from '@angular/animations';\nimport { DateTime } from 'luxon';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-period',\n    templateUrl: 'ngx-material-timepicker-period.component.html',\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)'}),\n                animate('.2s', style({transform: 'scale(1)'})),\n                sequence([\n                    animate('3s', style({opacity: 1})),\n                    animate('.3s', style({opacity: 0}))\n                ])\n            ])\n        ])\n    ]\n})\nexport class NgxMaterialTimepickerPeriodComponent {\n\n    timePeriod = TimePeriod;\n    isPeriodAvailable = true;\n\n    @Input() selectedPeriod: TimePeriod;\n    @Input() format: number;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() hours: ClockFaceTime[];\n    @Input() minutes: ClockFaceTime[];\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() selectedHour: number | string;\n    @Input() meridiems: string[];\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n\n    changePeriod(period: TimePeriod): void {\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\n        if (this.isPeriodAvailable) {\n            this.periodChanged.next(period);\n        }\n    }\n\n    animationDone(): void {\n        this.isPeriodAvailable = true;\n    }\n\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\n        const time = this.getDisabledTimeByPeriod(period);\n        return !time.every(t => t.disabled);\n    }\n\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\n        switch (this.activeTimeUnit) {\n            case TimeUnit.HOUR:\n                return TimepickerTimeUtils.disableHours(this.hours, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            case TimeUnit.MINUTE:\n                return TimepickerTimeUtils.disableMinutes(this.minutes, +this.selectedHour, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            default:\n                throw new Error('no such TimeUnit');\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\n@Pipe({\n    name: 'timeFormatter'\n})\nexport class TimeFormatterPipe implements PipeTransform {\n\n    transform(time: number | string, timeUnit: TimeUnit): any {\n        if (time == null || time === '') {\n            return time;\n        }\n        switch (timeUnit) {\n            case TimeUnit.HOUR:\n                return DateTime.fromObject({hour: +time}).toFormat('HH');\n            case TimeUnit.MINUTE:\n                return DateTime.fromObject({minute: +time}).toFormat('mm');\n            default:\n                throw new Error('no such time unit');\n        }\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\n\n@Directive({\n    selector: '[overlay]'\n})\nexport class OverlayDirective {\n\n    @Input('overlay') preventClick: boolean;\n\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\n    }\n\n\n    @HostListener('click', ['$event'])\n    onClick(e: any) {\n        if (!this.preventClick) {\n            this.eventService.dispatchEvent(e);\n        }\n        e.preventDefault();\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'minutesFormatter'\n})\nexport class MinutesFormatterPipe implements PipeTransform {\n\n    transform(minute: number, gap = 5): number | string {\n        if (!minute) {\n            return minute;\n        }\n\n        return minute % gap === 0 ? minute : '';\n    }\n\n}\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n@Directive({\n    selector: '[timepickerAutofocus]'\n})\nexport class AutofocusDirective implements OnChanges, OnDestroy {\n\n    @Input('timepickerAutofocus') isFocusActive: boolean;\n\n    private activeElement: HTMLElement;\n\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\n        this.activeElement = this.document.activeElement;\n    }\n\n    ngOnChanges() {\n        if (this.isFocusActive) {\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n            setTimeout(() => this.element.nativeElement.focus({ preventScroll: true }));\n        }\n    }\n\n    ngOnDestroy() {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(() => this.activeElement.focus({ preventScroll: true }));\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Observable, Subject } from 'rxjs';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\nimport { TimeAdapter } from '../../services/time-adapter';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\nimport { DateTime } from 'luxon';\nimport { distinctUntilChanged, map, takeUntil, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'ngx-timepicker-field',\n    templateUrl: './ngx-timepicker-field.component.html',\n    styleUrls: ['./ngx-timepicker-field.component.scss'],\n    providers: [\n        NgxMaterialTimepickerService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: NgxTimepickerFieldComponent,\n            multi: true\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n    period: TimePeriod;\n    hour$: Observable<ClockFaceTime>;\n    minute$: Observable<ClockFaceTime>;\n\n    minHour = 1;\n    maxHour = 12;\n\n    timeUnit = TimeUnit;\n    timepickerTime: string;\n\n    hoursList: ClockFaceTime[];\n    minutesList: ClockFaceTime[];\n\n    isTimeRangeSet: boolean;\n    isChangePeriodDisabled: boolean;\n\n    @Input() disabled: boolean;\n    @Input() toggleIcon: TemplateRef<HTMLObjectElement>;\n    @Input() buttonAlign: 'right' | 'left' = 'right';\n    @Input() clockTheme: NgxMaterialTimepickerTheme;\n    @Input() controlOnly: boolean;\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        this.minHour = this._format === 12 ? 1 : 0;\n        this.maxHour = this._format === 12 ? 12 : 23;\n        this.hoursList = TimepickerTimeUtils.getHours(this._format);\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.updateTime(this.timepickerTime);\n        }\n        this.previousFormat = this._format;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._min = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._min = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._max = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._max = value;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    @Input()\n    set defaultTime(val: string) {\n        this._defaultTime = val;\n        this.isDefaultTime = !!val;\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    @Output() timeChanged = new EventEmitter<string>();\n\n    private _defaultTime: string;\n    private _format = 12;\n    private _min: string | DateTime;\n    private _max: string | DateTime;\n    private previousFormat: number;\n\n    private unsubscribe$ = new Subject();\n\n    private isFirstTimeChange = true;\n    private isDefaultTime: boolean;\n    private selectedHour: number;\n\n    private onChange: (value: string) => void = () => {\n    }\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    ngOnInit() {\n        this.initTime(this.defaultTime);\n\n        this.hoursList = TimepickerTimeUtils.getHours(this._format);\n        this.minutesList = TimepickerTimeUtils.getMinutes();\n        this.isTimeRangeSet = !!(this.min || this.max);\n\n        this.hour$ = this.timepickerService.selectedHour.pipe(\n            tap((clockTime: ClockFaceTime) => this.selectedHour = clockTime.time),\n            map(this.changeDefaultTimeValue.bind(this)),\n            tap(() => this.isTimeRangeSet && this.updateAvailableMinutes())\n        ) as Observable<ClockFaceTime>;\n        this.minute$ = this.timepickerService.selectedMinute.pipe(\n            map(this.changeDefaultTimeValue.bind(this)),\n            tap(() => this.isFirstTimeChange = false)\n        ) as Observable<ClockFaceTime>;\n\n        if (this.format === 12) {\n            this.timepickerService.selectedPeriod.pipe(\n                distinctUntilChanged<TimePeriod>(),\n                tap((period: TimePeriod) => this.period = period),\n                tap(period => this.isChangePeriodDisabled = this.isPeriodDisabled(period)),\n                takeUntil(this.unsubscribe$)\n            ).subscribe(() => this.isTimeRangeSet && this.updateAvailableTime());\n        }\n\n    }\n\n    writeValue(val: string): void {\n        if (val) {\n            this.initTime(val);\n        } else {\n            this.resetTime();\n        }\n    }\n\n    registerOnTouched(fn: any): void {\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    changeHour(hour: number): void {\n        this.timepickerService.hour = this.hoursList.find(h => h.time === hour);\n        this.changeTime();\n    }\n\n    changeMinute(minute: number): void {\n        this.timepickerService.minute = this.minutesList.find(m => m.time === minute);\n        this.changeTime();\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n        this.changeTime();\n    }\n\n    onTimeSet(time: string): void {\n        this.updateTime(time);\n        this.emitLocalTimeChange(time);\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n    }\n\n    private changeTime(): void {\n        const time = this.timepickerService.getFullTime(this.format);\n        this.timepickerTime = time;\n\n        this.emitLocalTimeChange(time);\n    }\n\n    private resetTime(): void {\n        this.timepickerService.hour = {angle: 0, time: null};\n        this.timepickerService.minute = {angle: 0, time: null};\n    }\n\n    private emitLocalTimeChange(time: string): void {\n        const localTime = TimeAdapter.toLocaleTimeString(time, {format: this.format, locale: this.locale});\n\n        this.onChange(localTime);\n        this.timeChanged.emit(localTime);\n    }\n\n    private changeDefaultTimeValue(clockFaceTime: ClockFaceTime): ClockFaceTime {\n        if (!this.isDefaultTime && this.isFirstTimeChange) {\n            return {...clockFaceTime, time: null};\n        }\n        return clockFaceTime;\n    }\n\n    private updateAvailableHours(): void {\n        this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: this.format,\n            period: this.period\n        });\n    }\n\n    private updateAvailableMinutes(): void {\n        this.minutesList = TimepickerTimeUtils.disableMinutes(this.minutesList, this.selectedHour, {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: this.format,\n            period: this.period\n        });\n    }\n\n    private updateAvailableTime(): void {\n        this.updateAvailableHours();\n        if (this.selectedHour) {\n            this.updateAvailableMinutes();\n        }\n    }\n\n    private updateTime(time: string): void {\n        if (time) {\n            const formattedTime = TimeAdapter.formatTime(time, {locale: this.locale, format: this.format});\n            this.timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min as DateTime, this.max as DateTime, this.format);\n            this.timepickerTime = formattedTime;\n        }\n    }\n\n    private initTime(time): void {\n        const isDefaultTimeAvailable = TimeAdapter\n            .isTimeAvailable(time, this.min as DateTime, this.max as DateTime, 'minutes', null, this.format);\n        if (!isDefaultTimeAvailable) {\n            if (this.min) {\n                this.updateTime(TimeAdapter.fromDateTimeToString(this.min as DateTime, this.format));\n                return;\n            }\n            if (this.max) {\n                this.updateTime(TimeAdapter.fromDateTimeToString(this.max as DateTime, this.format));\n                return;\n            }\n        }\n        this.updateTime(time);\n    }\n\n    private isPeriodDisabled(period): boolean {\n        return TimepickerTimeUtils.disableHours(TimepickerTimeUtils.getHours(12), {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: 12,\n            period: period === TimePeriod.AM ? TimePeriod.PM : TimePeriod.AM\n        }).every(time => time.disabled);\n    }\n\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { isDigit } from '../../../utils/timepicker.utils';\nimport { TimeUnit } from '../../../models/time-unit.enum';\nimport { TimeParserPipe } from '../../../pipes/time-parser.pipe';\nimport { ClockFaceTime } from '../../../models/clock-face-time.interface';\n\n@Component({\n    selector: 'ngx-timepicker-time-control',\n    templateUrl: './ngx-timepicker-time-control.component.html',\n    styleUrls: ['./ngx-timepicker-time-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TimeParserPipe]\n})\n\nexport class NgxTimepickerTimeControlComponent implements OnChanges {\n\n    @Input() time: number;\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string;\n    @Input() timeUnit: TimeUnit;\n    @Input() disabled: boolean;\n    @Input() timeList: ClockFaceTime[];\n    @Input() preventTyping: boolean;\n\n    @Output() timeChanged = new EventEmitter<number>();\n\n    isFocused: boolean;\n\n    private previousTime: number;\n\n    constructor(private timeParser: TimeParserPipe) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.timeList) {\n            if (this.isSelectedTimeDisabled(this.time)) {\n                this.setAvailableTime();\n            }\n        }\n    }\n\n    changeTime(event: any): void {\n        event.stopPropagation();\n\n        const char = String.fromCharCode(event.keyCode);\n        const time = concatTime(String(this.time), char);\n\n        this.changeTimeIfValid(time);\n    }\n\n    onKeydown(event: any): void {\n        event.stopPropagation();\n\n        if (!isDigit(event)) {\n            event.preventDefault();\n        }\n\n        switch (event.key) {\n            case 'ArrowUp':\n                this.increase();\n                break;\n            case 'ArrowDown':\n                this.decrease();\n                break;\n        }\n\n        if (this.preventTyping && event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    increase(): void {\n        if (!this.disabled) {\n            let nextTime = +this.time + 1;\n\n            if (nextTime > this.max) {\n                nextTime = this.min;\n            }\n\n            if (this.isSelectedTimeDisabled(nextTime)) {\n                nextTime = this.getAvailableTime(nextTime, this.getNextAvailableTime.bind(this)) ?? this.time;\n            }\n\n            if (nextTime !== this.time) {\n                this.timeChanged.emit(nextTime);\n            }\n        }\n    }\n\n    decrease(): void {\n        if (!this.disabled) {\n            let previousTime = +this.time - 1;\n\n            if (previousTime < this.min) {\n                previousTime = this.max;\n            }\n\n            if (this.isSelectedTimeDisabled(previousTime)) {\n                previousTime = this.getAvailableTime(previousTime, this.getPrevAvailableTime.bind(this)) ?? this.time;\n            }\n\n            if (previousTime !== this.time) {\n                this.timeChanged.emit(previousTime);\n            }\n        }\n    }\n\n    onFocus(): void {\n        this.isFocused = true;\n        this.previousTime = this.time;\n    }\n\n    onBlur(): void {\n        this.isFocused = false;\n\n        if (this.previousTime !== this.time) {\n            this.changeTimeIfValid(+this.time);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = +this.timeParser.transform(value, this.timeUnit);\n    }\n\n    private changeTimeIfValid(value: number | undefined) {\n        if (!isNaN(value)) {\n            this.time = value;\n\n            if (this.time > this.max) {\n                const timeString = String(value);\n                this.time = +timeString[timeString.length - 1];\n            }\n\n            if (this.time < this.min) {\n                this.time = this.min;\n            }\n\n            this.timeChanged.emit(this.time);\n        }\n    }\n\n    private isSelectedTimeDisabled(time: number): boolean {\n        return this.timeList.find((faceTime: ClockFaceTime) => faceTime.time === time)?.disabled;\n    }\n\n    private getNextAvailableTime(index: number): number | undefined {\n        const timeCollection = this.timeList;\n        const maxValue = timeCollection.length;\n        for (let i = index + 1; i < maxValue; i++) {\n            const time = timeCollection[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n    }\n\n    private getPrevAvailableTime(index: number): number | undefined {\n        for (let i = index; i >= 0; i--) {\n            const time = this.timeList[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n    }\n\n    private getAvailableTime(currentTime: number, fn: (index: number) => number | undefined): number | undefined {\n        const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);\n        return fn(currentTimeIndex);\n    }\n\n    private setAvailableTime(): void {\n        this.time = this.timeList.find(t => !t.disabled)?.time;\n        this.timeChanged.emit(this.time);\n    }\n}\n\nfunction concatTime(currentTime: string, nextTime: string): number {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return +time;\n    }\n}\n\n","import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../../models/time-period.enum';\nimport { animate, style, transition, trigger } from '@angular/animations';\nimport { TIME_LOCALE } from '../../../tokens/time-locale.token';\nimport { Info } from 'luxon';\n\n@Component({\n    selector: 'ngx-timepicker-period-selector',\n    templateUrl: 'ngx-timepicker-period-selector.component.html',\n    styleUrls: ['./ngx-timepicker-period-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)', opacity: 0}),\n                animate(200, style({transform: 'scale(1)', opacity: 1}))\n            ]),\n            transition(':leave', [\n                animate(200, style({transform: 'scale(0)', opacity: 0}))\n            ])\n        ])\n    ]\n})\n\nexport class NgxTimepickerPeriodSelectorComponent {\n\n    @Input() isOpened: boolean;\n    @Input() disabled: boolean;\n    @Input()\n    set selectedPeriod(period: TimePeriod) {\n        if (period) {\n            const periods = [TimePeriod.AM, TimePeriod.PM];\n            this.localizedPeriod = this.meridiems[periods.indexOf(period)];\n        }\n    }\n\n    @Output() periodSelected = new EventEmitter<TimePeriod>();\n\n    period = TimePeriod;\n    meridiems = Info.meridiems({locale: this.locale});\n    localizedPeriod: string;\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    open(): void {\n        if (!this.disabled) {\n            this.isOpened = true;\n        }\n    }\n\n    select(period: TimePeriod): void {\n        this.periodSelected.next(period);\n        this.isOpened = false;\n    }\n\n    backdropClick(): void {\n        this.isOpened = false;\n    }\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\ntype TimeMeasure = 'hour' | 'minute';\n\n@Pipe({\n    name: 'timeLocalizer'\n})\nexport class TimeLocalizerPipe implements PipeTransform {\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    transform(time: number | string, timeUnit: TimeUnit, isKeyboardEnabled = false): string {\n        if (time == null || time === '') {\n            return '';\n        }\n\n        switch (timeUnit) {\n            case TimeUnit.HOUR: {\n                const format = (time === 0 || isKeyboardEnabled) ? 'HH' : 'H';\n                return this.formatTime('hour', time, format);\n            }\n            case TimeUnit.MINUTE:\n                return this.formatTime('minute', time, 'mm');\n            default:\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\n        }\n    }\n\n    private formatTime(timeMeasure: TimeMeasure, time: string | number, format: string): string {\n        try {\n            return DateTime.fromObject({[timeMeasure]: +time}).setLocale(this.locale).toFormat(format);\n        } catch {\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this.locale}`);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeHour'\n})\nexport class ActiveHourPipe implements PipeTransform {\n\n    transform(hour: number, currentHour: number, isClockFaceDisabled: boolean): boolean {\n        if (hour == null || isClockFaceDisabled) {\n            return false;\n        }\n\n        return hour === currentHour;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeMinute'\n})\nexport class ActiveMinutePipe implements PipeTransform {\n\n    transform(minute: number, currentMinute: number, gap: number, isClockFaceDisabled: boolean): boolean {\n        if (minute == null || isClockFaceDisabled) {\n            return false;\n        }\n        const defaultGap = 5;\n\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\n    }\n\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-content',\n    templateUrl: './ngx-material-timepicker-content.component.html',\n})\nexport class NgxMaterialTimepickerContentComponent {\n    @Input() appendToInput: boolean;\n    @Input() inputElement: any;\n}\n","import { AfterViewInit, Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';\n\ntype TimepickerDirection = 'top' | 'center' | 'bottom';\n\n@Directive({\n    selector: '[ngxAppendToInput]'\n})\nexport class AppendToInputDirective implements AfterViewInit {\n\n    @Input('ngxAppendToInput') inputElement: any;\n\n    private _direction: TimepickerDirection;\n    private _inputCords: ClientRect;\n    private readonly element: HTMLElement;\n\n    constructor(elementRef: ElementRef<HTMLElement>,\n                private renderer: Renderer2) {\n        this.element = elementRef.nativeElement;\n    }\n\n    private get inputCords(): ClientRect {\n        return this.inputElement.getBoundingClientRect();\n    }\n\n    private get direction(): TimepickerDirection {\n        const height = this.element.offsetHeight;\n        const {bottom, top} = this._inputCords;\n        const isElementFit = (window && window.innerHeight) - bottom < height;\n        const isTop = isElementFit && top > height;\n        const isCenter = isElementFit && top < height;\n\n        if (isTop) {\n            return 'top';\n        } else if (isCenter) {\n            return 'center';\n        }\n        return 'bottom';\n    }\n\n    ngAfterViewInit(): void {\n        this._inputCords = this.inputCords;\n        this._direction = this.direction;\n\n        this.append();\n    }\n\n    @HostListener('window:scroll')\n    changePosition(): void {\n        const {bottom, top} = this.inputCords;\n        const y = this.defineElementYByDirection(top, bottom);\n        this.setStyle('top', `${y}px`);\n    }\n\n    private append(): void {\n        const {left, bottom, top} = this._inputCords;\n        const y = this.defineElementYByDirection(top, bottom);\n\n        this.setStyle('position', 'fixed');\n        this.setStyle('left', `${left}px`);\n        this.setStyle('top', `${y}px`);\n    }\n\n    private setStyle(style: string, value: string): void {\n        this.renderer.setStyle(this.element, style, value);\n    }\n\n    private defineElementYByDirection(inputTop: number, inputBottom: number): number {\n        if (this._direction === 'top') {\n            return inputTop - this.element.offsetHeight;\n        } else if (this._direction === 'center') {\n            return inputTop - (this.element.offsetHeight / 2);\n        }\n        return inputBottom;\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxMaterialTimepickerComponent } from './ngx-material-timepicker.component';\nimport { FormsModule } from '@angular/forms';\nimport { NgxMaterialTimepickerToggleComponent } from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { NgxMaterialTimepickerToggleIconDirective } from './directives/ngx-material-timepicker-toggle-icon.directive';\nimport { NgxMaterialTimepickerThemeDirective } from './directives/ngx-material-timepicker-theme.directive';\nimport {\n    NgxMaterialTimepicker24HoursFaceComponent\n} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\nimport {\n    NgxMaterialTimepicker12HoursFaceComponent\n} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\nimport {\n    NgxMaterialTimepickerMinutesFaceComponent } from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\nimport { NgxMaterialTimepickerFaceComponent } from './components/timepicker-face/ngx-material-timepicker-face.component';\nimport { NgxMaterialTimepickerButtonComponent } from './components/timepicker-button/ngx-material-timepicker-button.component';\nimport { NgxMaterialTimepickerDialComponent } from './components/timepicker-dial/ngx-material-timepicker-dial.component';\nimport {\n    NgxMaterialTimepickerDialControlComponent } from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\nimport { NgxMaterialTimepickerPeriodComponent } from './components/timepicker-period/ngx-material-timepicker-period.component';\nimport { TimeFormatterPipe } from './pipes/time-formatter.pipe';\nimport { OverlayDirective } from './directives/overlay.directive';\nimport { MinutesFormatterPipe } from './pipes/minutes-formatter.pipe';\nimport { AutofocusDirective } from './directives/autofocus.directive';\nimport { NgxTimepickerFieldComponent } from './components/timepicker-field/ngx-timepicker-field.component';\nimport {\n    NgxTimepickerTimeControlComponent\n} from './components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component';\nimport {\n    NgxTimepickerPeriodSelectorComponent\n} from './components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component';\nimport { TimeLocalizerPipe } from './pipes/time-localizer.pipe';\nimport { TIME_LOCALE } from './tokens/time-locale.token';\nimport { TimeAdapter } from './services/time-adapter';\nimport { TimeParserPipe } from './pipes/time-parser.pipe';\nimport { ActiveHourPipe } from './pipes/active-hour.pipe';\nimport { ActiveMinutePipe } from './pipes/active-minute.pipe';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from './components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport {\n    NgxMaterialTimepickerContentComponent\n} from './components/ngx-material-timepicker-content/ngx-material-timepicker-content.component';\nimport { AppendToInputDirective } from './directives/append-to-input.directive';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxTimepickerFieldComponent,\n        TimepickerDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        NgxMaterialTimepickerThemeDirective,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent\n    ],\n    declarations: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxMaterialTimepickerButtonComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent,\n        NgxMaterialTimepickerPeriodComponent,\n        TimeFormatterPipe,\n        TimepickerDirective,\n        OverlayDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        AutofocusDirective,\n        MinutesFormatterPipe,\n        NgxMaterialTimepickerThemeDirective,\n        NgxTimepickerFieldComponent,\n        NgxTimepickerTimeControlComponent,\n        NgxTimepickerPeriodSelectorComponent,\n        TimeLocalizerPipe,\n        TimeParserPipe,\n        ActiveHourPipe,\n        ActiveMinutePipe,\n        NgxMaterialTimepickerContainerComponent,\n        NgxMaterialTimepickerContentComponent,\n        AppendToInputDirective\n    ],\n    providers: [\n        {provide: TIME_LOCALE, useValue: TimeAdapter.DEFAULT_LOCALE},\n    ],\n    entryComponents: [NgxMaterialTimepickerContainerComponent]\n})\nexport class NgxMaterialTimepickerModule {\n\n    static setLocale(locale: string): ModuleWithProviders<NgxMaterialTimepickerModule> {\n        return {\n            ngModule: NgxMaterialTimepickerModule,\n            providers: [\n                {provide: TIME_LOCALE, useValue: locale}\n            ]\n        };\n    }\n}\n"]}