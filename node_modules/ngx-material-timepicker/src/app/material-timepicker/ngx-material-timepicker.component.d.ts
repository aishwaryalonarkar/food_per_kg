import { EventEmitter, TemplateRef } from '@angular/core';
import { Subject } from 'rxjs';
import { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';
import { TimepickerDirective } from './directives/ngx-timepicker.directive';
import { DateTime } from 'luxon';
import { DomService } from './services/dom.service';
import { TimepickerRef } from './models/timepicker-ref.interface';
import { NgxMaterialTimepickerTheme } from './models/ngx-material-timepicker-theme.interface';
import * as ɵngcc0 from '@angular/core';
export declare class NgxMaterialTimepickerComponent implements TimepickerRef {
    private eventService;
    private domService;
    timeUpdated: Subject<string>;
    cancelBtnTmpl: TemplateRef<Node>;
    editableHintTmpl: TemplateRef<Node>;
    confirmBtnTmpl: TemplateRef<Node>;
    isEsc: boolean;
    enableKeyboardInput: boolean;
    preventOverlayClick: boolean;
    disableAnimation: boolean;
    appendToInput: boolean;
    hoursOnly: boolean;
    defaultTime: string;
    timepickerClass: string;
    theme: NgxMaterialTimepickerTheme;
    min: DateTime;
    max: DateTime;
    /**
     * @deprecated Since version 5.1.1. Will be deleted on version 6.0.0. Use @Input() theme instead
     */
    set ngxMaterialTimepickerTheme(theme: NgxMaterialTimepickerTheme);
    set format(value: number);
    get format(): number;
    set minutesGap(gap: number);
    get minutesGap(): number;
    timeSet: EventEmitter<string>;
    opened: EventEmitter<null>;
    closed: EventEmitter<null>;
    hourSelected: EventEmitter<number>;
    timeChanged: EventEmitter<string>;
    private _minutesGap;
    private _format;
    private _ngxMaterialTimepickerTheme;
    private timepickerInput;
    private unsubscribe;
    constructor(eventService: NgxMaterialTimepickerEventService, domService: DomService);
    get minTime(): DateTime;
    get maxTime(): DateTime;
    get disabled(): boolean;
    get time(): string;
    get inputElement(): any;
    /***
     * Register an input with this timepicker.
     * input - The timepicker input to register with this timepicker
     */
    registerInput(input: TimepickerDirective): void;
    open(): void;
    close(): void;
    updateTime(time: string): void;
    private subscribeToEvents;
    private unsubscribeFromEvents;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxMaterialTimepickerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxMaterialTimepickerComponent, "ngx-material-timepicker", never, {
    "isEsc": "ESC";
    "hoursOnly": "hoursOnly";
    "ngxMaterialTimepickerTheme": "ngxMaterialTimepickerTheme";
    "format": "format";
    "minutesGap": "minutesGap";
    "cancelBtnTmpl": "cancelBtnTmpl";
    "editableHintTmpl": "editableHintTmpl";
    "confirmBtnTmpl": "confirmBtnTmpl";
    "enableKeyboardInput": "enableKeyboardInput";
    "preventOverlayClick": "preventOverlayClick";
    "disableAnimation": "disableAnimation";
    "appendToInput": "appendToInput";
    "defaultTime": "defaultTime";
    "timepickerClass": "timepickerClass";
    "theme": "theme";
    "min": "min";
    "max": "max";
}, {
    "timeSet": "timeSet";
    "opened": "opened";
    "closed": "closed";
    "hourSelected": "hourSelected";
    "timeChanged": "timeChanged";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC1tYXRlcmlhbC10aW1lcGlja2VyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmd4TWF0ZXJpYWxUaW1lcGlja2VyRXZlbnRTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9uZ3gtbWF0ZXJpYWwtdGltZXBpY2tlci1ldmVudC5zZXJ2aWNlJztcbmltcG9ydCB7IFRpbWVwaWNrZXJEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvbmd4LXRpbWVwaWNrZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSAnbHV4b24nO1xuaW1wb3J0IHsgRG9tU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvZG9tLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGltZXBpY2tlclJlZiB9IGZyb20gJy4vbW9kZWxzL3RpbWVwaWNrZXItcmVmLmludGVyZmFjZSc7XG5pbXBvcnQgeyBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJUaGVtZSB9IGZyb20gJy4vbW9kZWxzL25neC1tYXRlcmlhbC10aW1lcGlja2VyLXRoZW1lLmludGVyZmFjZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJDb21wb25lbnQgaW1wbGVtZW50cyBUaW1lcGlja2VyUmVmIHtcbiAgICBwcml2YXRlIGV2ZW50U2VydmljZTtcbiAgICBwcml2YXRlIGRvbVNlcnZpY2U7XG4gICAgdGltZVVwZGF0ZWQ6IFN1YmplY3Q8c3RyaW5nPjtcbiAgICBjYW5jZWxCdG5UbXBsOiBUZW1wbGF0ZVJlZjxOb2RlPjtcbiAgICBlZGl0YWJsZUhpbnRUbXBsOiBUZW1wbGF0ZVJlZjxOb2RlPjtcbiAgICBjb25maXJtQnRuVG1wbDogVGVtcGxhdGVSZWY8Tm9kZT47XG4gICAgaXNFc2M6IGJvb2xlYW47XG4gICAgZW5hYmxlS2V5Ym9hcmRJbnB1dDogYm9vbGVhbjtcbiAgICBwcmV2ZW50T3ZlcmxheUNsaWNrOiBib29sZWFuO1xuICAgIGRpc2FibGVBbmltYXRpb246IGJvb2xlYW47XG4gICAgYXBwZW5kVG9JbnB1dDogYm9vbGVhbjtcbiAgICBob3Vyc09ubHk6IGJvb2xlYW47XG4gICAgZGVmYXVsdFRpbWU6IHN0cmluZztcbiAgICB0aW1lcGlja2VyQ2xhc3M6IHN0cmluZztcbiAgICB0aGVtZTogTmd4TWF0ZXJpYWxUaW1lcGlja2VyVGhlbWU7XG4gICAgbWluOiBEYXRlVGltZTtcbiAgICBtYXg6IERhdGVUaW1lO1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFNpbmNlIHZlcnNpb24gNS4xLjEuIFdpbGwgYmUgZGVsZXRlZCBvbiB2ZXJzaW9uIDYuMC4wLiBVc2UgQElucHV0KCkgdGhlbWUgaW5zdGVhZFxuICAgICAqL1xuICAgIHNldCBuZ3hNYXRlcmlhbFRpbWVwaWNrZXJUaGVtZSh0aGVtZTogTmd4TWF0ZXJpYWxUaW1lcGlja2VyVGhlbWUpO1xuICAgIHNldCBmb3JtYXQodmFsdWU6IG51bWJlcik7XG4gICAgZ2V0IGZvcm1hdCgpOiBudW1iZXI7XG4gICAgc2V0IG1pbnV0ZXNHYXAoZ2FwOiBudW1iZXIpO1xuICAgIGdldCBtaW51dGVzR2FwKCk6IG51bWJlcjtcbiAgICB0aW1lU2V0OiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICBvcGVuZWQ6IEV2ZW50RW1pdHRlcjxudWxsPjtcbiAgICBjbG9zZWQ6IEV2ZW50RW1pdHRlcjxudWxsPjtcbiAgICBob3VyU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIHRpbWVDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICBwcml2YXRlIF9taW51dGVzR2FwO1xuICAgIHByaXZhdGUgX2Zvcm1hdDtcbiAgICBwcml2YXRlIF9uZ3hNYXRlcmlhbFRpbWVwaWNrZXJUaGVtZTtcbiAgICBwcml2YXRlIHRpbWVwaWNrZXJJbnB1dDtcbiAgICBwcml2YXRlIHVuc3Vic2NyaWJlO1xuICAgIGNvbnN0cnVjdG9yKGV2ZW50U2VydmljZTogTmd4TWF0ZXJpYWxUaW1lcGlja2VyRXZlbnRTZXJ2aWNlLCBkb21TZXJ2aWNlOiBEb21TZXJ2aWNlKTtcbiAgICBnZXQgbWluVGltZSgpOiBEYXRlVGltZTtcbiAgICBnZXQgbWF4VGltZSgpOiBEYXRlVGltZTtcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBnZXQgdGltZSgpOiBzdHJpbmc7XG4gICAgZ2V0IGlucHV0RWxlbWVudCgpOiBhbnk7XG4gICAgLyoqKlxuICAgICAqIFJlZ2lzdGVyIGFuIGlucHV0IHdpdGggdGhpcyB0aW1lcGlja2VyLlxuICAgICAqIGlucHV0IC0gVGhlIHRpbWVwaWNrZXIgaW5wdXQgdG8gcmVnaXN0ZXIgd2l0aCB0aGlzIHRpbWVwaWNrZXJcbiAgICAgKi9cbiAgICByZWdpc3RlcklucHV0KGlucHV0OiBUaW1lcGlja2VyRGlyZWN0aXZlKTogdm9pZDtcbiAgICBvcGVuKCk6IHZvaWQ7XG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICB1cGRhdGVUaW1lKHRpbWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVUb0V2ZW50cztcbiAgICBwcml2YXRlIHVuc3Vic2NyaWJlRnJvbUV2ZW50cztcbn1cbiJdfQ==