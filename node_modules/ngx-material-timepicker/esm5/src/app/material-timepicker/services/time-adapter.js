import { __assign } from "tslib";
import { DateTime } from 'luxon';
import { TimeFormat } from '../models/time-format.enum';
import { TimePeriod } from '../models/time-period.enum';
import { isBetween, isSameOrAfter, isSameOrBefore } from '../utils/timepicker.utils';
// @dynamic
var TimeAdapter = /** @class */ (function () {
    function TimeAdapter() {
    }
    TimeAdapter.parseTime = function (time, opts) {
        var _a = TimeAdapter.getLocaleOptionsByTime(time, opts), numberingSystem = _a.numberingSystem, locale = _a.locale;
        var isPeriodExist = time.split(' ').length === 2;
        var timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;
        return DateTime.fromFormat(time, timeMask, { numberingSystem: numberingSystem, locale: locale });
    };
    TimeAdapter.formatTime = function (time, opts) {
        var _a, _b;
        var format = opts.format;
        var parsedTime = TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE);
        if (format !== 24) {
            return (_a = parsedTime.toLocaleString(__assign(__assign({}, DateTime.TIME_SIMPLE), { hour12: format !== 24, numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM }))) === null || _a === void 0 ? void 0 : _a.replace(/\u200E/g, '');
        }
        return (_b = parsedTime.toISOTime({
            includeOffset: false,
            suppressMilliseconds: true,
            suppressSeconds: true
        })) === null || _b === void 0 ? void 0 : _b.replace(/\u200E/g, '');
    };
    TimeAdapter.toLocaleTimeString = function (time, opts) {
        if (opts === void 0) { opts = {}; }
        var _a = opts.format, format = _a === void 0 ? TimeAdapter.DEFAULT_FORMAT : _a, _b = opts.locale, locale = _b === void 0 ? TimeAdapter.DEFAULT_LOCALE : _b;
        var timeFormat = __assign(__assign({}, DateTime.TIME_SIMPLE), { hour12: format !== 24 });
        var timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;
        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);
    };
    TimeAdapter.isTimeAvailable = function (time, min, max, granularity, minutesGap, format) {
        if (!time) {
            return;
        }
        var convertedTime = this.parseTime(time, { format: format });
        var minutes = convertedTime.minute;
        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {
            throw new Error("Your minutes - " + minutes + " doesn't match your minutesGap - " + minutesGap);
        }
        var isAfter = (min && !max)
            && isSameOrAfter(convertedTime, min, granularity);
        var isBefore = (max && !min)
            && isSameOrBefore(convertedTime, max, granularity);
        var between = (min && max)
            && isBetween(convertedTime, min, max, granularity);
        var isAvailable = !min && !max;
        return isAfter || isBefore || between || isAvailable;
    };
    /***
     *  Format hour according to time format (12 or 24)
     */
    TimeAdapter.formatHour = function (currentHour, format, period) {
        if (format === 24) {
            return currentHour;
        }
        var hour = period === TimePeriod.AM ? currentHour : currentHour + 12;
        if (period === TimePeriod.AM && hour === 12) {
            return 0;
        }
        else if (period === TimePeriod.PM && hour === 24) {
            return 12;
        }
        return hour;
    };
    TimeAdapter.fromDateTimeToString = function (time, format) {
        var timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;
        return time.reconfigure({
            numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,
            locale: TimeAdapter.DEFAULT_LOCALE
        }).toFormat(timeFormat);
    };
    TimeAdapter.getLocaleOptionsByTime = function (time, opts) {
        var _a = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts(), numberingSystem = _a.numberingSystem, locale = _a.locale;
        var localeConfig = { numberingSystem: numberingSystem, locale: locale };
        var defaultConfig = { numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM, locale: TimeAdapter.DEFAULT_LOCALE };
        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;
    };
    TimeAdapter.DEFAULT_FORMAT = 12;
    TimeAdapter.DEFAULT_LOCALE = 'en-US';
    TimeAdapter.DEFAULT_NUMBERING_SYSTEM = 'latn';
    return TimeAdapter;
}());
export { TimeAdapter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJzcmMvYXBwL21hdGVyaWFsLXRpbWVwaWNrZXIvc2VydmljZXMvdGltZS1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsUUFBUSxFQUF3RCxNQUFNLE9BQU8sQ0FBQztBQUV0RixPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDdEQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ3RELE9BQU8sRUFBQyxTQUFTLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBR25GLFdBQVc7QUFDWDtJQUFBO0lBcUdBLENBQUM7SUFoR1UscUJBQVMsR0FBaEIsVUFBaUIsSUFBWSxFQUFFLElBQWlCO1FBQ3RDLElBQUEsbURBQTBFLEVBQXpFLG9DQUFlLEVBQUUsa0JBQXdELENBQUM7UUFDakYsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO1FBQ25ELElBQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDO1FBRXhGLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUMsZUFBZSxpQkFBQSxFQUFFLE1BQU0sUUFBQSxFQUFDLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRU0sc0JBQVUsR0FBakIsVUFBa0IsSUFBWSxFQUFFLElBQWlCOztRQUN0QyxJQUFBLG9CQUFNLENBQVM7UUFDdEIsSUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLFdB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cEIsMEJBQWMsR0FBRyxPQUFPLENBQUM7SUFDekIsb0NBQXdCLEdBQW9CLE1BQU0sQ0FBQztJQWtHOUQsa0JBQUM7Q0FBQSxBQXJHRCxJQXFHQztTQXJHWSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEYXRlVGltZSwgRGF0ZVRpbWVGb3JtYXRPcHRpb25zLCBMb2NhbGVPcHRpb25zLCBOdW1iZXJpbmdTeXN0ZW19IGZyb20gJ2x1eG9uJztcblxuaW1wb3J0IHtUaW1lRm9ybWF0fSBmcm9tICcuLi9tb2RlbHMvdGltZS1mb3JtYXQuZW51bSc7XG5pbXBvcnQge1RpbWVQZXJpb2R9IGZyb20gJy4uL21vZGVscy90aW1lLXBlcmlvZC5lbnVtJztcbmltcG9ydCB7aXNCZXR3ZWVuLCBpc1NhbWVPckFmdGVyLCBpc1NhbWVPckJlZm9yZX0gZnJvbSAnLi4vdXRpbHMvdGltZXBpY2tlci51dGlscyc7XG5pbXBvcnQge1RpbWVPcHRpb25zfSBmcm9tICcuLi9tb2RlbHMvdGltZS1vcHRpb25zLmludGVyZmFjZSc7XG5cbi8vIEBkeW5hbWljXG5leHBvcnQgY2xhc3MgVGltZUFkYXB0ZXIge1xuICAgIHN0YXRpYyBERUZBVUxUX0ZPUk1BVCA9IDEyO1xuICAgIHN0YXRpYyBERUZBVUxUX0xPQ0FMRSA9ICdlbi1VUyc7XG4gICAgc3RhdGljIERFRkFVTFRfTlVNQkVSSU5HX1NZU1RFTTogTnVtYmVyaW5nU3lzdGVtID0gJ2xhdG4nO1xuXG4gICAgc3RhdGljIHBhcnNlVGltZSh0aW1lOiBzdHJpbmcsIG9wdHM6IFRpbWVPcHRpb25zKTogRGF0ZVRpbWUge1xuICAgICAgICBjb25zdCB7bnVtYmVyaW5nU3lzdGVtLCBsb2NhbGV9ID0gVGltZUFkYXB0ZXIuZ2V0TG9jYWxlT3B0aW9uc0J5VGltZSh0aW1lLCBvcHRzKTtcbiAgICAgICAgY29uc3QgaXNQZXJpb2RFeGlzdCA9IHRpbWUuc3BsaXQoJyAnKS5sZW5ndGggPT09IDI7XG4gICAgICAgIGNvbnN0IHRpbWVNYXNrID0gaXNQZXJpb2RFeGlzdCA/IFRpbWVGb3JtYXQuVFdFTFZFX1NIT1JUIDogVGltZUZvcm1hdC5UV0VOVFlfRk9VUl9TSE9SVDtcblxuICAgICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUZvcm1hdCh0aW1lLCB0aW1lTWFzaywge251bWJlcmluZ1N5c3RlbSwgbG9jYWxlfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdFRpbWUodGltZTogc3RyaW5nLCBvcHRzOiBUaW1lT3B0aW9ucyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHtmb3JtYXR9ID0gb3B0cztcbiAgICAgICAgY29uc3QgcGFyc2VkVGltZSA9IFRpbWVBZGFwdGVyLnBhcnNlVGltZSh0aW1lLCBvcHRzKS5zZXRMb2NhbGUoVGltZUFkYXB0ZXIuREVGQVVMVF9MT0NBTEUpO1xuXG4gICAgICAgIGlmIChmb3JtYXQgIT09IDI0KSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkVGltZS50b0xvY2FsZVN0cmluZyh7XG4gICAgICAgICAgICAgICAgLi4uRGF0ZVRpbWUuVElNRV9TSU1QTEUsXG4gICAgICAgICAgICAgICAgaG91cjEyOiBmb3JtYXQgIT09IDI0LFxuICAgICAgICAgICAgICAgIG51bWJlcmluZ1N5c3RlbTogVGltZUFkYXB0ZXIuREVGQVVMVF9OVU1CRVJJTkdfU1lTVEVNXG4gICAgICAgICAgICB9KT8ucmVwbGFjZSgvXFx1MjAwRS9nLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlZFRpbWUudG9JU09UaW1lKHtcbiAgICAgICAgICAgIGluY2x1ZGVPZmZzZXQ6IGZhbHNlLFxuICAgICAgICAgICAgc3VwcHJlc3NNaWxsaXNlY29uZHM6IHRydWUsXG4gICAgICAgICAgICBzdXBwcmVzc1NlY29uZHM6IHRydWVcbiAgICAgICAgfSk/LnJlcGxhY2UoL1xcdTIwMEUvZywgJycpO1xuICAgIH1cblxuICAgIHN0YXRpYyB0b0xvY2FsZVRpbWVTdHJpbmcodGltZTogc3RyaW5nLCBvcHRzOiBUaW1lT3B0aW9ucyA9IHt9KTogc3RyaW5nIHtcbiAgICAgICAgY29uc3Qge2Zvcm1hdCA9IFRpbWVBZGFwdGVyLkRFRkFVTFRfRk9STUFULCBsb2NhbGUgPSBUaW1lQWRhcHRlci5ERUZBVUxUX0xPQ0FMRX0gPSBvcHRzO1xuICAgICAgICBjb25zdCB0aW1lRm9ybWF0OiBEYXRlVGltZUZvcm1hdE9wdGlvbnMgPSB7Li4uRGF0ZVRpbWUuVElNRV9TSU1QTEUsIGhvdXIxMjogZm9ybWF0ICE9PSAyNH07XG4gICAgICAgIGNvbnN0IHRpbWVNYXNrID0gKGZvcm1hdCA9PT0gMjQpID8gVGltZUZvcm1hdC5UV0VOVFlfRk9VUl9TSE9SVCA6IFRpbWVGb3JtYXQuVFdFTFZFX1NIT1JUO1xuXG4gICAgICAgIHJldHVybiBEYXRlVGltZS5mcm9tRm9ybWF0KHRpbWUsIHRpbWVNYXNrKS5zZXRMb2NhbGUobG9jYWxlKS50b0xvY2FsZVN0cmluZyh0aW1lRm9ybWF0KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNUaW1lQXZhaWxhYmxlKFxuICAgICAgICB0aW1lOiBzdHJpbmcsXG4gICAgICAgIG1pbj86IERhdGVUaW1lLFxuICAgICAgICBtYXg/OiBEYXRlVGltZSxcbiAgICAgICAgZ3JhbnVsYXJpdHk/OiAnaG91cnMnIHwgJ21pbnV0ZXMnLFxuICAgICAgICBtaW51dGVzR2FwPzogbnVtYmVyIHwgbnVsbCxcbiAgICAgICAgZm9ybWF0PzogbnVtYmVyXG4gICAgKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghdGltZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29udmVydGVkVGltZSA9IHRoaXMucGFyc2VUaW1lKHRpbWUsIHtmb3JtYXR9KTtcbiAgICAgICAgY29uc3QgbWludXRlcyA9IGNvbnZlcnRlZFRpbWUubWludXRlO1xuXG4gICAgICAgIGlmIChtaW51dGVzR2FwICYmIG1pbnV0ZXMgPT09IG1pbnV0ZXMgJiYgbWludXRlcyAlIG1pbnV0ZXNHYXAgIT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91ciBtaW51dGVzIC0gJHttaW51dGVzfSBkb2VzblxcJ3QgbWF0Y2ggeW91ciBtaW51dGVzR2FwIC0gJHttaW51dGVzR2FwfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzQWZ0ZXIgPSAobWluICYmICFtYXgpXG4gICAgICAgICAgICAmJiBpc1NhbWVPckFmdGVyKGNvbnZlcnRlZFRpbWUsIG1pbiwgZ3JhbnVsYXJpdHkpO1xuICAgICAgICBjb25zdCBpc0JlZm9yZSA9IChtYXggJiYgIW1pbilcbiAgICAgICAgICAgICYmIGlzU2FtZU9yQmVmb3JlKGNvbnZlcnRlZFRpbWUsIG1heCwgZ3JhbnVsYXJpdHkpO1xuICAgICAgICBjb25zdCBiZXR3ZWVuID0gKG1pbiAmJiBtYXgpXG4gICAgICAgICAgICAmJiBpc0JldHdlZW4oY29udmVydGVkVGltZSwgbWluLCBtYXgsIGdyYW51bGFyaXR5KTtcbiAgICAgICAgY29uc3QgaXNBdmFpbGFibGUgPSAhbWluICYmICFtYXg7XG5cbiAgICAgICAgcmV0dXJuIGlzQWZ0ZXIgfHwgaXNCZWZvcmUgfHwgYmV0d2VlbiB8fCBpc0F2YWlsYWJsZTtcbiAgICB9XG5cbiAgICAvKioqXG4gICAgICogIEZvcm1hdCBob3VyIGFjY29yZGluZyB0byB0aW1lIGZvcm1hdCAoMTIgb3IgMjQpXG4gICAgICovXG4gICAgc3RhdGljIGZvcm1hdEhvdXIoY3VycmVudEhvdXI6IG51bWJlciwgZm9ybWF0OiBudW1iZXIsIHBlcmlvZDogVGltZVBlcmlvZCk6IG51bWJlciB7XG4gICAgICAgIGlmIChmb3JtYXQgPT09IDI0KSB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudEhvdXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaG91ciA9IHBlcmlvZCA9PT0gVGltZVBlcmlvZC5BTSA/IGN1cnJlbnRIb3VyIDogY3VycmVudEhvdXIgKyAxMjtcblxuICAgICAgICBpZiAocGVyaW9kID09PSBUaW1lUGVyaW9kLkFNICYmIGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSBlbHNlIGlmIChwZXJpb2QgPT09IFRpbWVQZXJpb2QuUE0gJiYgaG91ciA9PT0gMjQpIHtcbiAgICAgICAgICAgIHJldHVybiAxMjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaG91cjtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbURhdGVUaW1lVG9TdHJpbmcodGltZTogRGF0ZVRpbWUsIGZvcm1hdDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgdGltZUZvcm1hdCA9IGZvcm1hdCA9PT0gMjQgPyBUaW1lRm9ybWF0LlRXRU5UWV9GT1VSIDogVGltZUZvcm1hdC5UV0VMVkU7XG5cbiAgICAgICAgcmV0dXJuIHRpbWUucmVjb25maWd1cmUoe1xuICAgICAgICAgICAgbnVtYmVyaW5nU3lzdGVtOiBUaW1lQWRhcHRlci5ERUZBVUxUX05VTUJFUklOR19TWVNURU0sXG4gICAgICAgICAgICBsb2NhbGU6IFRpbWVBZGFwdGVyLkRFRkFVTFRfTE9DQUxFXG4gICAgICAgIH0pLnRvRm9ybWF0KHRpbWVGb3JtYXQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdldExvY2FsZU9wdGlvbnNCeVRpbWUodGltZTogc3RyaW5nLCBvcHRzOiBUaW1lT3B0aW9ucyk6IExvY2FsZU9wdGlvbnMge1xuICAgICAgICBjb25zdCB7bnVtYmVyaW5nU3lzdGVtLCBsb2NhbGV9ID0gRGF0ZVRpbWUubG9jYWwoKS5zZXRMb2NhbGUob3B0cy5sb2NhbGUpLnJlc29sdmVkTG9jYWxlT3B0cygpO1xuICAgICAgICBjb25zdCBsb2NhbGVDb25maWc6IExvY2FsZU9wdGlvbnMgPSB7bnVtYmVyaW5nU3lzdGVtOiBudW1iZXJpbmdTeXN0ZW0gYXMgTnVtYmVyaW5nU3lzdGVtLCBsb2NhbGV9O1xuICAgICAgICBjb25zdCBkZWZhdWx0Q29uZmlnOiBMb2NhbGVPcHRpb25zID0ge251bWJlcmluZ1N5c3RlbTogVGltZUFkYXB0ZXIuREVGQVVMVF9OVU1CRVJJTkdfU1lTVEVNLCBsb2NhbGU6IFRpbWVBZGFwdGVyLkRFRkFVTFRfTE9DQUxFfTtcblxuICAgICAgICByZXR1cm4gaXNOYU4ocGFyc2VJbnQodGltZSwgMTApKSA/IGxvY2FsZUNvbmZpZyA6IGRlZmF1bHRDb25maWc7XG4gICAgfVxufVxuIl19